main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
# Función de densidad
f <- function(x) {
ifelse(x >= 0 & x < 1, 1/4,
ifelse(x >= 1 & x <= 2, x^3 / 5, 0))
}
# Graficar la función de densidad
curve(f, from = -0.5, to = 2.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# Función acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x < 1) {
return(integrate(f, lower = 0, upper = x)$value)
} else if (x <= 2) {
return(integrate(f, lower = 0, upper = 1)$value + integrate(f, lower = 1, upper = x)$value)
} else {
return(1)
}
}
# Vectorizar la función acumulada
F_vec <- Vectorize(F)
# Graficar la función acumulada
x_values <- seq(-0.5, 2.5, by = 0.1)
cdf_values <- F_vec(x_values)
plot(x_values, cdf_values, type = "l", col = "red", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# a) Calcula su función de densidad y gráfica.
# Función de densidad
f <- function(x) {
ifelse(x >= 6 & x <= 7, 1, 0)
}
# Graficar la función de densidad
curve(f, from = 5.5, to = 7.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x (hora de llegada)", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# b) Calcula su función de probabilidad acumulada
# Función acumulada (CDF)
F <- function(x) {
ifelse(x < 6, 0,
ifelse(x <= 7, x - 6, 1))
}
# Graficar la función acumulada
curve(F, from = 5.5, to = 7.5, col = "red", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x (hora de llegada)", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# c) Calcula la probabilidad de que llegue antes de las 6 y 15
# Probabilidad de llegar antes de las 6:15
p_before_615 <- F(6.25)
cat("P(X <= 6:15):", p_before_615, "\n")
# d) Calcula la probabilidad de que llegue después de las 6 y 30
# Probabilidad de llegar después de las 6:30
p_after_630 <- 1 - F(6.5)
cat("P(X > 6:30):", p_after_630, "\n")
# e) Calcula la esperanza
# Probabilidad de llegar después de las 6:30
p_after_630 <- 1 - F(6.5)
cat("P(X > 6:30):", p_after_630, "\n")
# Sea X un número aleatorio con distribucisón uniforme en (0,5) y por tanto con una pdf de: f(x) = 1/5. Calcula P(2 ≤ X ≤ 4.5)
# Parámetros de la distribución
a <- 0  # límite inferior
b <- 5  # límite superior
f <- 1 / (b - a)  # densidad
# Intervalo de interés
c <- 2
d <- 4.5
# Cálculo de la probabilidad
P <- (d - c) * f
cat("P(2 <= X <= 4.5):", P, "\n")
# Definir parámetros
a <- 0      # Límite inferior del dial
b <- 360    # Límite superior del dial
f <- 1 / (b - a)  # Densidad uniforme
# Función para calcular la probabilidad
calc_prob <- function(c, d) {
P <- (d - c) * f
return(P)
}
# a) P(5 ≤ X ≤ 30)
P_a <- calc_prob(5, 30)
cat("P(5 ≤ X ≤ 30):", P_a, "\n")
# b) P(0 ≤ X ≤ 90)
P_b <- calc_prob(0, 90)
cat("P(0 ≤ X ≤ 90):", P_b, "\n")
# c) P(0 ≤ X ≤ 90) (Repetido, mismo cálculo que el anterior)
P_c <- calc_prob(0, 90)
cat("P(0 ≤ X ≤ 90) (repetido):", P_c, "\n")
# d) P(0 ≤ X ≤ 180)
P_d <- calc_prob(0, 180)
cat("P(0 ≤ X ≤ 180):", P_d, "\n")
# e) P(0 ≤ X ≤ 270)
P_e <- calc_prob(0, 270)
cat("P(0 ≤ X ≤ 270):", P_e, "\n")
# f) P(0 ≤ X ≤ 120)
P_f <- calc_prob(0, 120)
cat("P(0 ≤ X ≤ 120):", P_f, "\n")
# a) Verifica que f(x) es una función de densidad valida:
# Verificar que la integral de f(x) en el dominio [0, 1] es 1
f <- function(x) 3 * x^2
integral_f <- integrate(f, lower = 0, upper = 1)$value
cat("La integral de f(x) en [0, 1] es:", integral_f, "\n")
# b) CalculaP(x>2):
# Probabilidad de que X > 2
p_x_greater_2 <- 0
cat("P(X > 2):", p_x_greater_2, "\n")
# c) Calcula P(1/2 < x < 1):
# Probabilidad de que 1/2 < X < 1
p_half_to_1 <- integrate(f, lower = 0.5, upper = 1)$value
cat("P(1/2 < X < 1):", p_half_to_1, "\n")
# d) Calcula la función de densidad acumulada, F(x):
# Función acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x <= 1) {
return(x^3)  # Integral de 3x^2
} else {
return(1)
}
}
# Vectorizar la función para graficar
F_vec <- Vectorize(F)
# Graficar la CDF
curve(F_vec, from = -0.5, to = 1.5, col = "blue", lwd = 2,
main = "Función Acumulada F(x)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# e) ¿Cuáal es la esperanza de X, E(X)?
# Esperanza de X
E_X <- integrate(function(x) x * f(x), lower = 0, upper = 1)$value
cat("E(X):", E_X, "\n")
# f) ¿y su varianza, Var(X)?
# Cálculo de E(X^2)
E_X2 <- integrate(function(x) x^2 * f(x), lower = 0, upper = 1)$value
# Cálculo de la varianza
Var_X <- E_X2 - E_X^2
cat("Var(X):", Var_X, "\n")
# a) Gráfica la pdf.
# Función de densidad
f <- function(x) {
if (x < -1 || x > 1) {
return(0)
} else if (x >= -1 && x < 0) {
return(x + 1)
} else if (x >= 0 && x <= 1) {
return(1 - x)
}
}
# Vectorizar la función para graficar
f_vec <- Vectorize(f)
# Graficar la PDF
curve(f_vec, from = -1.5, to = 1.5, col = "blue", lwd = 2,
main = "Función de Densidad (PDF)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# b) Verifica si es válida
# Verificar la integral de f(x)
integral_f <- integrate(f_vec, lower = -1, upper = 1)$value
cat("La integral de f(x) en [-1, 1] es:", integral_f, "\n")
# c) Calcula su función de densidad acumulada, F(x)
# Función acumulada (CDF)
F <- function(x) {
if (x < -1) {
return(0)
} else if (x >= -1 && x < 0) {
return((x + 1)^2 / 2)
} else if (x >= 0 && x <= 1) {
return((x + 1)^2 / 2 + (x - x^2 / 2))
} else {
return(1)
}
}
# Vectorizar la función para graficar
F_vec <- Vectorize(F)
# d) Gráfica esta última
# Graficar la CDF
curve(F_vec, from = -1.5, to = 1.5, col = "red", lwd = 2,
main = "Función Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# Siendo X una variable aleatoria continua con la siguientef(x), se pide calcular la su esperanza.
# Definir la función f(x)
f <- function(x) {
ifelse(x > 0 & x < 1, 2 * x, 0)
}
# Cálculo de E(X) mediante integración
E_X <- integrate(function(x) x * 2 * x, lower = 0, upper = 1)$value
cat("La esperanza E(X) es:", E_X, "\n")
# Calcular E(X)
E_X <- integrate(function(x) x * 2 * x, lower = 0, upper = 1)$value
# Calcular E(X^2)
E_X2 <- integrate(function(x) (x^2) * 2 * x, lower = 0, upper = 1)$value
# Calcular Var(X)
Var_X <- E_X2 - E_X^2
# Imprimir resultados
cat("Esperanza, E(X):", E_X, "\n")
cat("Varianza, Var(X):", Var_X, "\n")
# Cargar la librería Matrix
library(Matrix)
# Datos del problema
x = c(0, 1, 2, 3, 4)
y = c(50, 66.5, 75, 81, 86.5)
# 1. Paso: Ajustar los datos a la recta y = m*x + n.
#    Para ello, planteamos el sistema en forma matricial A * X = b,
#    donde X = [m; n].
#    A = [x, 1] (columna de x y columna de unos)
#    b = y
A = cbind(x, 1)  # Matriz A con la primera columna x y la segunda columna de 1s
b = matrix(y, ncol=1)  # Vector columna b con los valores de y
# 2. Paso: Comprobar el tipo de sistema usando el Teorema de Rouché-Frobenius
rango_A = qr(A)$rank
rango_ampliada = qr(cbind(A, b))$rank
cat("Rango de A:", rango_A, "\n")
cat("Rango de la matriz ampliada:", rango_ampliada, "\n")
if (rango_A == rango_ampliada && rango_A == ncol(A)) {
cat("El sistema es compatible determinado.\n")
} else if (rango_A == rango_ampliada && rango_A < ncol(A)) {
cat("El sistema es compatible indeterminado.\n")
} else {
cat("El sistema es incompatible. Se buscará la solución de mínimos cuadrados.\n")
}
# 3. Paso: Existencia de la inversa lateral (izquierda)
#    La inversa lateral izquierda existe si A tiene rango completo por columnas.
#    Aquí A es de dimensión 5x2, si rango_A = 2, hay rango completo por columnas.
if (rango_A == ncol(A)) {
cat("La matriz A es de rango completo por columnas, existe inversa lateral izquierda.\n")
} else {
cat("No existe inversa lateral izquierda.\n")
}
# 4. Paso: Cálculo de la matriz inversa a izquierda
#    Inversa a izquierda: A_inv_izq = (A^T A)^(-1) A^T
A_inv_izq = solve(t(A) %*% A) %*% t(A)
# 5. Paso: Resolver el sistema por mínimos cuadrados
#    X = A_inv_izq * b
solucion = A_inv_izq %*% b
m = solucion[1]
n = solucion[2]
cat("La solución en mínimos cuadrados es: m =", m, ", n =", n, "\n")
# 6. Paso: Graficar los datos y la recta ajustada
# Instalar y cargar ggplot2 si no está instalado
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
datos = data.frame(x = x, y = y)
ggplot(datos, aes(x = x, y = y)) +
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = m, intercept = n, color = "blue") +
labs(title = "Ajuste por mínimos cuadrados",
x = "Semestres",
y = "Estatura media (cm)") +
theme_minimal()
library(ggplot2)
datos = data.frame(x = x, y = y)
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = m, intercept = n, color = "blue") +
labs(title = "Ajuste por mínimos cuadrados",
x = "Semestres",
y = "Estatura media (cm)") +
theme_minimal()
# Cargar la librería Matrix
library(Matrix)
# Datos del problema
x = c(0, 1, 2, 3, 4)
y = c(50, 66.5, 75, 81, 86.5)
# 1. Paso: Ajustar los datos a la recta y = m*x + n.
#    Para ello, planteamos el sistema en forma matricial A * X = b,
#    donde X = [m; n].
#    A = [x, 1] (columna de x y columna de unos)
#    b = y
A = cbind(x, 1)  # Matriz A con la primera columna x y la segunda columna de 1s
b = matrix(y, ncol=1)  # Vector columna b con los valores de y
# 2. Paso: Comprobar el tipo de sistema (incompatible/compatible) usando el Teorema de R-F (Rouché-Frobenius)
rango_A = qr(A)$rank
rango_ampliada = qr(cbind(A, b))$rank
cat("Rango de A:", rango_A, "\n")
cat("Rango de la matriz ampliada:", rango_ampliada, "\n")
if (rango_A == rango_ampliada && rango_A == ncol(A)) {
cat("El sistema es compatible determinado.\n")
} else if (rango_A == rango_ampliada && rango_A < ncol(A)) {
cat("El sistema es compatible indeterminado.\n")
} else {
cat("El sistema es incompatible. Se buscará la solución de mínimos cuadrados.\n")
}
# 3. Paso: Existencia de la inversa lateral (izquierda)
#    La inversa lateral izquierda existe si A tiene rango completo por columnas.
#    Aquí A es de dimensión 5x2, si rango_A = 2, hay rango completo por columnas.
if (rango_A == ncol(A)) {
cat("La matriz A es de rango completo por columnas, existe inversa lateral izquierda.\n")
} else {
cat("No existe inversa lateral izquierda.\n")
}
# 4. Paso: Cálculo de la matriz inversa a izquierda
#    Inversa a izquierda: A_inv_izq = (A^T A)^(-1) A^T
A_inv_izq = solve(t(A) %*% A) %*% t(A)
# 5. Paso: Resolver el sistema por mínimos cuadrados
#    X = A_inv_izq * b
solucion = A_inv_izq %*% b
m = solucion[1]
n = solucion[2]
cat("La solución en mínimos cuadrados es: m =", m, ", n =", n, "\n")
# 6. Paso: Graficar los datos y la recta ajustada
# Instalar y cargar ggplot2 si no está instalado
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
datos = data.frame(x = x, y = y)
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = m, intercept = n, color = "blue") +
labs(title = "Ajuste por mínimos cuadrados",
x = "Semestres",
y = "Estatura media (cm)") +
theme_minimal()
# Limpiar el entorno y establecer semilla para reproducibilidad
rm(list=ls())
set.seed(123)
# Cargar librerías necesarias
library(xgboost)
library(caret)
library(dplyr)
library(tidyr)
library(ggplot2)
library(rpart)
library(data.table)
# 1. Leer los datos
train <- fread("train.csv", stringsAsFactors = FALSE)
setwd("~/01_CODE/___AI-BIG-DATA___/03-Modelos-de-IA/02-Modelos-Supervisados-Clasificacion/R_ML_CLASSIFICATION/00-ML-Class-Competitions/titanic")
# 1. Leer los datos
train <- fread("train.csv", stringsAsFactors = FALSE)
test <- fread("test.csv", stringsAsFactors = FALSE)
summary(train)
summary(test)
# Añadir columna 'Survived' al conjunto de test para unificar los datos
test$Survived <- NA
# Combinar los conjuntos de datos
full_data <- bind_rows(train, test)
## 2.1 Extraer títulos de los nombres
full_data$Title <- gsub('(.*, )|(\\..*)', '', full_data$Name)
# Agrupar títulos poco comunes
rare_titles <- c('Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev',
'Sir', 'Jonkheer', 'Dona')
full_data$Title[full_data$Title %in% rare_titles] <- 'Rare'
full_data$Title[full_data$Title == 'Mlle'] <- 'Miss'
full_data$Title[full_data$Title == 'Ms'] <- 'Miss'
full_data$Title[full_data$Title == 'Mme'] <- 'Mrs'
full_data$Title <- factor(full_data$Title)
## 2.2 Crear variable 'FamilySize'
full_data$FamilySize <- full_data$SibSp + full_data$Parch + 1
## 2.3 Crear variable 'IsAlone'
full_data$IsAlone <- ifelse(full_data$FamilySize == 1, 1, 0)
full_data$IsAlone <- factor(full_data$IsAlone)
## 2.4 Rellenar valores faltantes en 'Embarked' con el modo
summary(full_data$Embarked)
table(full_data$Embarked)
library(ggplot2)
ggplot(full_data, aes(x = Embarked)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frecuencia de cada puerto de embarque", x = "Puerto de Embarque", y = "Frecuencia") +
theme_minimal()
library(rpart)
# Dividir datos con valores no faltantes en 'Embarked'
embarked_data <- full_data[full_data$Embarked != "", ]
# Crear un modelo para predecir 'Embarked'
embarked_model <- rpart(Embarked ~ Pclass + Sex + Fare + Age + Title + FamilySize,
data = embarked_data, method = "class")
# Predecir los valores de 'Embarked' faltantes
missing_embarked <- full_data[full_data$Embarked == "", ]
# Asegurarse de que la predicción sea categórica (C, Q, S)
full_data$Embarked[full_data$Embarked == ""] <- as.character(
predict(embarked_model, missing_embarked, type = "class")
)
# Convertir a factor después de la imputación
full_data$Embarked <- factor(full_data$Embarked, levels = c("C", "Q", "S"))
full_data$Embarked[full_data$Embarked == ""] <- "S"
full_data$Embarked <- factor(full_data$Embarked)
## 2.5 Rellenar valores faltantes en 'Fare' con la mediana
full_data$Fare[is.na(full_data$Fare)] <- median(full_data$Fare, na.rm = TRUE)
library(ggplot2)
ggplot(train, aes(x = factor(Survived), y = Age)) +
geom_boxplot() +
labs(title = "Distribución de Edad según Supervivencia", x = "Supervivencia (0 = No, 1 = Sí)", y = "Edad")
# Anova
# Asegúrate de que todas las variables relevantes estén en el formato correcto
full_data$Sex <- as.factor(full_data$Sex)
full_data$Embarked <- as.factor(full_data$Embarked)
full_data$Title <- as.factor(full_data$Title)
full_data$IsAlone <- as.factor(full_data$IsAlone)
# Eliminar variables no relevantes o textuales
full_data$Name <- NULL
full_data$Ticket <- NULL
full_data$Cabin <- NULL
full_data$PassengerId <- NULL
# Imputar valores faltantes en Age
full_data$Age[is.na(full_data$Age)] <- median(full_data$Age, na.rm = TRUE)
# Asegúrate de que no haya valores faltantes
full_data <- na.omit(full_data)
# Ajustar el modelo ANOVA
anova_model <- aov(Age ~ ., data = full_data)
summary(anova_model)
# Dividir datos con valores no faltantes en 'Age'
age_data <- full_data[!is.na(full_data$Age), ]
# Crear una partición 80% entrenamiento y 20% prueba
set.seed(42)
train_index <- createDataPartition(age_data$Age, p = 0.8, list = FALSE)
train_data <- age_data[train_index, ]
test_data <- age_data[-train_index, ]
# Entrenar el modelo de árbol de decisión
age_model <- rpart(Age ~ Pclass + SibSp + Parch + Embarked + Title + IsAlone,
data = train_data,
method = "anova")
# Predicción del Árbol de Decisión
test_data$Age_Pred_Tree <- predict(age_model, test_data)
# Imputación con la Mediana
age_median <- median(train_data$Age, na.rm = TRUE)
test_data$Age_Pred_Median <- age_median
# Calcular métricas para el Árbol de Decisión
mse_tree <- mean((test_data$Age - test_data$Age_Pred_Tree)^2)
mae_tree <- mean(abs(test_data$Age - test_data$Age_Pred_Tree))
# Calcular métricas para la Mediana
mse_median <- mean((test_data$Age - test_data$Age_Pred_Median)^2)
mae_median <- mean(abs(test_data$Age - test_data$Age_Pred_Median))
# Imprimir Resultados
cat("Resultados con Árbol de Decisión:\n")
cat("MSE:", mse_tree, "\n")
cat("MAE:", mae_tree, "\n\n")
cat("Resultados con la Mediana:\n")
cat("MSE:", mse_median, "\n")
cat("MAE:", mae_median, "\n")
# Comparar Resultados Visualmente
library(ggplot2)
results <- data.frame(
Method = c("Tree", "Median"),
MSE = c(mse_tree, mse_median),
MAE = c(mae_tree, mae_median)
)
ggplot(results, aes(x = Method)) +
geom_bar(aes(y = MSE), stat = "identity", fill = "blue", alpha = 0.7) +
geom_text(aes(y = MSE, label = round(MSE, 2)), vjust = -0.5) +
labs(title = "Comparación de Errores (MSE)",
x = "Método", y = "MSE") +
theme_minimal()
ggplot(results, aes(x = Method)) +
geom_bar(aes(y = MAE), stat = "identity", fill = "green", alpha = 0.7) +
geom_text(aes(y = MAE, label = round(MAE, 2)), vjust = -0.5) +
labs(title = "Comparación de Errores (MAE)",
x = "Método", y = "MAE") +
theme_minimal()
# Revisar contribución de cada variable
drop1(anova_model, test = "F")
## 2.6 Imputar valores faltantes en 'Age' utilizando un modelo predictivo árbol de regresión
age_model <- rpart(Age ~ Pclass + Sex + Fare + Embarked + Title + FamilySize,
data = full_data[!is.na(full_data$Age), ],
method = "anova")
full_data$Age[is.na(full_data$Age)] <- predict(age_model, full_data[is.na(full_data$Age), ])
## 2.7 Crear variable 'AgeGroup'
full_data$AgeGroup <- cut(full_data$Age,
breaks = c(0, 12, 18, 25, 35, 60, Inf),
labels = c("Child", "Teenager", "YoungAdult", "Adult", "MiddleAged", "Senior"))
## 2.8 Crear variable 'FareGroup'
full_data$FareGroup <- cut(full_data$Fare,
breaks = quantile(full_data$Fare, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE,
labels = c("VeryLow", "Low", "Medium", "High", "VeryHigh"))
## 2.9 Crear variable 'Deck' a partir de 'Cabin'
full_data$Deck <- substr(full_data$Cabin, 1, 1)
full_data$Deck[full_data$Deck == ""] <- "U"  # U de 'Unknown'
full_data$Deck <- factor(full_data$Deck)
levels(full_data$Deck)
## 2.10 Crear variable 'TicketPrefix'
full_data$TicketPrefix <- sapply(full_data$Ticket, function(x) strsplit(x, " ")[[1]][1])
full_data$TicketPrefix <- ifelse(full_data$TicketPrefix %in% c("A", "P", "SOTON/OQ", "STON/O2.", "S.C./PARIS", "SC/AH", "SC/PARIS", "SC/Paris"), full_data$TicketPrefix, "Other")
full_data$TicketPrefix <- factor(full_data$TicketPrefix)
levels(full_data$TicketPrefix)
## 3.1 Transformación logarítmica en 'Fare'
full_data$Fare <- log1p(full_data$Fare)
## 3.2 Detección y manejo de outliers en 'Age' usando el rango intercuartílico
Q1 <- quantile(full_data$Age, 0.25)
Q3 <- quantile(full_data$Age, 0.75)
IQR <- Q3 - Q1
full_data$Age[full_data$Age < (Q1 - 1.5 * IQR)] <- Q1
full_data$Age[full_data$Age > (Q3 + 1.5 * IQR)] <- Q3
# 4. Conversión de variables categóricas a factores
full_data$Sex <- factor(full_data$Sex)
full_data$Pclass <- factor(full_data$Pclass)
full_data$Embarked <- factor(full_data$Embarked)
full_data$AgeGroup <- factor(full_data$AgeGroup)
full_data$FareGroup <- factor(full_data$FareGroup)
full_data$Deck <- factor(full_data$Deck)
full_data$TicketPrefix <- factor(full_data$TicketPrefix)
# 5. Creación de variables dummy
dummy_vars <- dummyVars(~ Pclass + Sex + Embarked + Title + AgeGroup + FareGroup + IsAlone + Deck + TicketPrefix,
data = full_data)
full_dummy <- data.frame(predict(dummy_vars, newdata = full_data))
# Combinar variables dummy con variables numéricas relevantes
full_model_data <- cbind(full_dummy,
FamilySize = full_data$FamilySize,
Fare = full_data$Fare,
Survived = full_data$Survived)
# 6. Separar nuevamente en conjuntos de entrenamiento y prueba
train_data <- full_model_data[1:nrow(train), ]
