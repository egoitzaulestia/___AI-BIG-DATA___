adjusted_r_squared <- summary(reg_lin)$adj.r.squared
print("R cuadrado ajustado (R² ajustado): Ajusta el R cuadrado considerando el número de predictores en el modelo, lo que evita sobreajuste.")
print(adjusted_r_squared)
# Obtener los coeficientes, valores t y valores p
coeficientes <- summary(reg_lin)[["coefficients"]][, "Estimate"]
valores_t <- summary(reg_lin)[["coefficients"]][, "t value"]
valores_p <- summary(reg_lin)[["coefficients"]][, "Pr(>|t|)"]
print("Coeficientes: Representan el efecto de cada variable independiente en la esperanza de vida.")
print(coeficientes)
print("Valores t: Indican la relación de cada variable con el modelo; valores altos sugieren significancia estadística.")
print(valores_t)
print("Valores p: Miden la significancia estadística de cada variable. Valores bajos sugieren que la variable es relevante.")
print(valores_p)
# Obtener el estadístico F y su p-valor
f_statistic <- summary(reg_lin)$fstatistic[1]
p_value_f <- pf(f_statistic, df1 = summary(reg_lin)$fstatistic[2], df2 = summary(reg_lin)$fstatistic[3], lower.tail = FALSE)
print("Estadístico F: Evalúa la significancia global del modelo. Valores altos indican que el modelo tiene sentido globalmente.")
print(f_statistic)
print("p-valor del estadístico F: Indica la probabilidad de obtener un estadístico F tan alto solo por azar. Valores bajos sugieren un modelo significativo.")
print(p_value_f)
# Predicciones para las nuevas ciudades
ciudades_nuevas <- data.frame(
habitantes = c(500, 2000, 10000),
area = c(70735, 78009, 80900),
ingresos = c(4440, 4500, 5100),
asesinatos = c(4, 12, 15),
universitarios = c(60, 40, 20),
heladas = c(150, 100, 50)
)
# 5. Predecir sobre los datos de TEST: predict(object, newdata)
y_pred <- round(predict(reg_lin, newdata = ciudades_nuevas), digits = 1)
print("Predicciones para las nuevas ciudades:")
print(y_pred)
# Usamos la primera ciudad en 'ciudades_nuevas' como observación de prueba
test <- data.frame(esp_vida = c(70))  # Cambia este valor a la esperanza de vida real de la primera ciudad si la conoces
# Creación de la tabla de resultados
resultados <- cbind(test$esp_vida, y_pred[1])
colnames(resultados) <- c("Esperanza de Vida Real", "Predicción")
resultados
# Calcular error absoluto y relativo (porcentaje) para la primera ciudad
abs_error <- abs(resultados[1] - resultados[2])
pro_error <- 100 * abs_error / resultados[1]
# Añadir los errores a la tabla de resultados
resultados <- cbind(resultados, abs_error, pro_error)
colnames(resultados) <- c("Esperanza de Vida Real", "Predicción", "Error (abs)", "Error (%)")
# Mostrar resultados finales
print("Resultados de predicción y error para la primera ciudad:")
print(resultados)
# Ecuación del modelo final
print("Ecuación del modelo final:")
cat("y =", coeficientes[1], "+", coeficientes[2], "* asesinatos +", coeficientes[3], "* universitarios +", coeficientes[4], "* heladas\n")
cat("y =", coeficientes[1], "+", coeficientes[2], "* x1(asesinatos) +", coeficientes[3], "* x2(universitarios) +", coeficientes[4], "* x3(heladas)\n")
# Cargar el dataset PlantGrowth
data("PlantGrowth")
# Visualizar los primeros datos
head(PlantGrowth)
# Realizar el ANOVA
modelo_anova <- aov(weight ~ group, data = PlantGrowth)
# Ver el resumen del ANOVA
print("Resultado del ANOVA:")
summary(modelo_anova)
# Realizar el test de Tukey si rechazamos la hipótesis nula
tukey_resultados <- TukeyHSD(modelo_anova)
# Mostrar los resultados del test de Tukey
print("Resultados del test de Tukey:")
print(tukey_resultados)
# Conclusión final basada en los resultados del ANOVA y el test de Tukey
cat("\nConclusión final:\n")
# Hipótesis nula
cat("Hipótesis nula (H0): No hay diferencias significativas en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA mostró diferencias significativas entre los grupos, por lo que procedemos con el test de Tukey para identificar cuáles pares de grupos difieren.\n\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA mostró diferencias significativas entre los grupos, por lo que procedemos con el test de Tukey para identificar cuáles pares de grupos difieren.\n\n")
# Interpretación del test de Tukey para cada par
cat("Interpretación del test de Tukey:\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA mostró diferencias significativas entre los grupos, por lo que hemos procediso con el test de Tukey para identificar qué pares de grupos difieren.\n\n")
# Interpretación del test de Tukey para cada par
cat("Interpretación del test de Tukey:\n")
# Interpretación para trt1 vs ctrl
if (tukey_resultados$group["trt1-ctrl", "p adj"] > 0.05) {
cat("- No hay diferencia significativa entre 'trt1' y 'ctrl' (p =", round(tukey_resultados$group["trt1-ctrl", "p adj"], 4), ").\n")
} else {
cat("- Hay una diferencia significativa entre 'trt1' y 'ctrl' (p =", round(tukey_resultados$group["trt1-ctrl", "p adj"], 4), ").\n")
}
# Interpretación para trt2 vs ctrl
if (tukey_resultados$group["trt2-ctrl", "p adj"] > 0.05) {
cat("- No hay diferencia significativa entre 'trt2' y 'ctrl' (p =", round(tukey_resultados$group["trt2-ctrl", "p adj"], 4), ").\n")
} else {
cat("- Hay una diferencia significativa entre 'trt2' y 'ctrl' (p =", round(tukey_resultados$group["trt2-ctrl", "p adj"], 4), ").\n")
}
# Interpretación para trt2 vs trt1
if (tukey_resultados$group["trt2-trt1", "p adj"] < 0.05) {
cat("- Hay una diferencia significativa entre 'trt2' y 'trt1' (p =", round(tukey_resultados$group["trt2-trt1", "p adj"], 4), ").\n")
} else {
cat("- No hay diferencia significativa entre 'trt2' y 'trt1' (p =", round(tukey_resultados$group["trt2-trt1", "p adj"], 4), ").\n")
}
# Conclusión general
cat("\nConclusión general:\n")
cat("Existe una diferencia significativa en el peso seco promedio entre 'trt2' y 'trt1', mientras que no se observan diferencias significativas entre los otros pares de grupos.\n")
# Cargar el dataset PlantGrowth
data("PlantGrowth")
# Limpiar el entorno
rm(list = ls())
# Cargar el dataset PlantGrowth
data("PlantGrowth")
# Visualizar los primeros datos
head(PlantGrowth)
# Realizar el ANOVA
modelo_anova <- aov(weight ~ group, data = PlantGrowth)
# Ver el resumen del ANOVA
print("Resultado del ANOVA:")
summary(modelo_anova)
# Realizar el test de Tukey si rechazamos la hipótesis nula
tukey_resultados <- TukeyHSD(modelo_anova)
# Mostrar los resultados del test de Tukey
print("Resultados del test de Tukey:")
print(tukey_resultados)
# Conclusión final basada en los resultados del ANOVA y el test de Tukey
cat("\nConclusión final:\n")
# Hipótesis nula
cat("Hipótesis nula (H0): No hay diferencias significativas en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Hipótesis alternativa
cat("Hipótesis alternativa (H1): Existe al menos una diferencia significativa en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA nos proporciona un valor p asociado al factor 'group'.\n")
if (summary(modelo_anova)[[1]]["Pr(>F)"][1] < 0.05) {
cat("Dado que el valor p es menor a 0.05, rechazamos la hipótesis nula (H0).\n")
cat("Esto indica que hay diferencias significativas en el peso seco promedio entre al menos dos de los grupos.\n")
} else {
cat("Dado que el valor p es mayor o igual a 0.05, no rechazamos la hipótesis nula (H0).\n")
cat("Esto sugiere que no hay diferencias significativas en el peso seco promedio entre los grupos.\n")
}
# Limpiar el entorno
rm(list = ls())
# 1. Creamos la tabla de datos:
datos <- datos
datos <- readRDS("~/01_CODE/___AI-BIG-DATA___/02-Sistemas-de-Big-Data/03-Examen/datos.rds")
# 1. Creamos la tabla de datos (CARGAR DATOS R):
datos <- datos
# 3. División de datos TRAIN/TEST:
#     Como tenemos muy pocos datos vamos a coger:
#       train -> todos los datos
#       test -> una sola observación
#   3.1 sample.split{caTools}
#   3.2 createMultiFolds{caret}
library(caTools)
train <- subset(datos) # metemos el 100% de los datos
names(datos)
# 4. Ajustar el modelo a los datos de TRAIN: lm(formula, data)
# Ajustamos el modelo con solo las variables significativas
reg_lin <- lm(formula = esp_vida ~ asesinatos + universitarios + heladas, data = train)
# Obtener y mostrar resumen del modelo de regresión lineal
resumen <- summary(reg_lin)
print("Resumen del modelo de regresión lineal con variables significativas:")
print(resumen)
# Obtener el R cuadrado
r_squared <- summary(reg_lin)$r.squared
print("R cuadrado (R²): Indica el porcentaje de variabilidad de la esperanza de vida explicada por el modelo.")
print(r_squared)
# Obtener el R cuadrado ajustado
adjusted_r_squared <- summary(reg_lin)$adj.r.squared
print("R cuadrado ajustado (R² ajustado): Ajusta el R cuadrado considerando el número de predictores en el modelo, lo que evita sobreajuste.")
print(adjusted_r_squared)
# Obtener los coeficientes, valores t y valores p
coeficientes <- summary(reg_lin)[["coefficients"]][, "Estimate"]
valores_t <- summary(reg_lin)[["coefficients"]][, "t value"]
valores_p <- summary(reg_lin)[["coefficients"]][, "Pr(>|t|)"]
print("Coeficientes: Representan el efecto de cada variable independiente en la esperanza de vida.")
print(coeficientes)
print("Valores t: Indican la relación de cada variable con el modelo; valores altos sugieren significancia estadística.")
print(valores_t)
print("Valores p: Miden la significancia estadística de cada variable. Valores bajos sugieren que la variable es relevante.")
print(valores_p)
# Cargar el dataset PlantGrowth
data("PlantGrowth")
# Visualizar los primeros datos
head(PlantGrowth)
# Realizar el ANOVA
modelo_anova <- aov(weight ~ group, data = PlantGrowth)
# Ver el resumen del ANOVA
print("Resultado del ANOVA:")
summary(modelo_anova)
# Realizar el test de Tukey si rechazamos la hipótesis nula
tukey_resultados <- TukeyHSD(modelo_anova)
# Mostrar los resultados del test de Tukey
print("Resultados del test de Tukey:")
print(tukey_resultados)
# Conclusión final basada en los resultados del ANOVA y el test de Tukey
cat("\nConclusión final:\n")
# Hipótesis nula
cat("Hipótesis nula (H0): No hay diferencias significativas en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Hipótesis alternativa
cat("Hipótesis alternativa (H1): Existe al menos una diferencia significativa en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA nos proporciona un valor p asociado al factor 'group'.\n")
if (summary(modelo_anova)[[1]]["Pr(>F)"][1] < 0.05) {
cat("Dado que el valor p es menor a 0.05, rechazamos la hipótesis nula (H0).\n")
cat("Esto indica que hay diferencias significativas en el peso seco promedio entre al menos dos de los grupos.\n")
} else {
cat("Dado que el valor p es mayor o igual a 0.05, no rechazamos la hipótesis nula (H0).\n")
cat("Esto sugiere que no hay diferencias significativas en el peso seco promedio entre los grupos.\n")
}
# Cargar el dataset PlantGrowth
data("PlantGrowth")
# Visualizar los primeros datos
head(PlantGrowth)
# Realizar el ANOVA
modelo_anova <- aov(weight ~ group, data = PlantGrowth)
# Ver el resumen del ANOVA
print("Resultado del ANOVA:")
summary(modelo_anova)
# Realizar el test de Tukey si rechazamos la hipótesis nula
tukey_resultados <- TukeyHSD(modelo_anova)
# Mostrar los resultados del test de Tukey
print("Resultados del test de Tukey:")
print(tukey_resultados)
# Conclusión final basada en los resultados del ANOVA y el test de Tukey
cat("\nConclusión final:\n")
# Hipótesis nula
cat("Hipótesis nula (H0): No hay diferencias significativas en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
cat("Hipótesis alternativa (H1): Existe al menos una diferencia significativa en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA mostró diferencias significativas entre los grupos, por lo que hemos procediso con el test de Tukey para identificar qué pares de grupos difieren.\n\n")
# Interpretación del test de Tukey para cada par
cat("Interpretación del test de Tukey:\n")
# Hipótesis alternativa
cat("Hipótesis alternativa (H1): Existe al menos una diferencia significativa en el peso seco promedio entre los tres grupos (ctrl, trt1 y trt2).\n")
# Interpretación de los resultados del ANOVA
cat("Resultados del ANOVA: El análisis ANOVA mostró diferencias significativas entre los grupos, por lo que hemos procediso con el test de Tukey para identificar qué pares de grupos difieren.\n\n")
# Interpretación del test de Tukey para cada par
cat("Interpretación del test de Tukey:\n")
# Interpretación para trt1 vs ctrl
if (tukey_resultados$group["trt1-ctrl", "p adj"] > 0.05) {
cat("- No hay diferencia significativa entre 'trt1' y 'ctrl' (p =", round(tukey_resultados$group["trt1-ctrl", "p adj"], 4), ").\n")
} else {
cat("- Hay una diferencia significativa entre 'trt1' y 'ctrl' (p =", round(tukey_resultados$group["trt1-ctrl", "p adj"], 4), ").\n")
}
# Interpretación para trt2 vs ctrl
if (tukey_resultados$group["trt2-ctrl", "p adj"] > 0.05) {
cat("- No hay diferencia significativa entre 'trt2' y 'ctrl' (p =", round(tukey_resultados$group["trt2-ctrl", "p adj"], 4), ").\n")
} else {
cat("- Hay una diferencia significativa entre 'trt2' y 'ctrl' (p =", round(tukey_resultados$group["trt2-ctrl", "p adj"], 4), ").\n")
}
# Interpretación para trt2 vs trt1
if (tukey_resultados$group["trt2-trt1", "p adj"] < 0.05) {
cat("- Hay una diferencia significativa entre 'trt2' y 'trt1' (p =", round(tukey_resultados$group["trt2-trt1", "p adj"], 4), ").\n")
} else {
cat("- No hay diferencia significativa entre 'trt2' y 'trt1' (p =", round(tukey_resultados$group["trt2-trt1", "p adj"], 4), ").\n")
}
# Conclusión general
cat("\nConclusión general:\n")
cat("Existe una diferencia significativa en el peso seco promedio entre 'trt2' y 'trt1', mientras que no se observan diferencias significativas entre los otros pares de grupos.\n")
# 1. Creamos la tabla de datos:
datos <- datos
# 3. División de datos TRAIN/TEST:
#     Como tenemos muy pocos datos vamos a coger:
#       train -> todos los datos
#       test -> una sola observación
#   3.1 sample.split{caTools}
#   3.2 createMultiFolds{caret}
library(caTools)
train <- subset(datos) # metemos el 100% de los datos
names(datos)
# 4. Ajustar el modelo a los datos de TRAIN: lm(formula, data)
# Ajustamos el modelo con solo las variables significativas
reg_lin <- lm(formula = esp_vida ~ asesinatos + universitarios + heladas, data = train)
# Obtener y mostrar resumen del modelo de regresión lineal
resumen <- summary(reg_lin)
print("Resumen del modelo de regresión lineal con variables significativas:")
print(resumen)
packages <- c("class","SDMTools","ggplot2","reshape2","clusterSim")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
packages <- c("e1071","caret","clusterSim")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
packages <- c("tibble","e1071","rpart","rpart.plot","class","SDMTools","ggplot2","reshape2","clusterSim","caret","C50","randomForest","xgboost")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
packages <- c("class","SDMTools","ggplot2","reshape2","clusterSim")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
rm(list=ls())
# Importamos datos Ventas.RData
load("Ventas.RData")
# save(datos2,file = "aaaa.RData") Ejemplo de salvar un dataframe
datos = datos
setwd("~/01_CODE/___AI-BIG-DATA___/03-Modelos-de-IA/02-Modelos-Supervisados-Clasificacion")
# Importamos datos Ventas.RData
load("Ventas.RData")
# save(datos2,file = "aaaa.RData") Ejemplo de salvar un dataframe
datos = datos
datos$ventas_altas2[datos$ventas_altas=="Si"]=1
datos$ventas_altas2[datos$ventas_altas=="No"]=0
datos$ventas_altas=NULL
datos$ventas_altas2 = as.factor(datos$ventas_altas2)
datos
datos$Urbain= NULL
datos$Urbain= NULL
# Importamos datos Ventas.RData
load("Ventas.RData")
# save(datos2,file = "aaaa.RData") Ejemplo de salvar un dataframe
datos = datos
datos$ventas_altas2[datos$ventas_altas=="Si"]=1
datos$ventas_altas2[datos$ventas_altas=="No"]=0
datos$ventas_altas=NULL
datos$ventas_altas2 = as.factor(datos$ventas_altas2)
datos$US2[datos$US=="Yes"]=1
datos$US2[datos$US=="No"]=0
datos$US=NULL
datos$Urbain2=as.numeric(datos$Urban=="Yes")
datos$Urbain= NULL
aciertolog=c()
indice = createMultiFolds(datos$Churn2, k = 5, times = 1) # Cogemos nuestra variable a elegir
indice = createMultiFolds(datos$ventas_altas, k = 5, times = 1) # Cogemos nuestra variable a elegir
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(ventas_altas~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$ventas_altas,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$ventas_altas)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(ventas_altas2~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$ventas_altas2,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$ventas_altas2)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
regresionlog
summary(regresionlog)
# Importamos datos Ventas.RData
load("Ventas.RData")
# save(datos2,file = "aaaa.RData") Ejemplo de salvar un dataframe
datos = datos
datos$ventas_altas2[datos$ventas_altas=="Si"]=1
datos$ventas_altas2[datos$ventas_altas=="No"]=0
datos$ventas_altas=NULL
datos$ventas_altas2 = as.factor(datos$ventas_altas2)
datos$US2[datos$US=="Yes"]=1
datos$US2[datos$US=="No"]=0
datos$US=NULL
datos$Urbain2=as.numeric(datos$Urban=="Yes")
datos$Urbain= NULL
# Convertir ShelveLoc en una variable ordinal con valores específicos
datos$ShelveLoc <- factor(datos$ShelveLoc, levels = c("Bad", "Medium", "Good"), ordered = TRUE)
datos$ShelveLoc <- as.numeric(datos$ShelveLoc)  # Convertir a valores numéricos
aciertolog=c()
indice = createMultiFolds(datos$ventas_altas2, k = 5, times = 1) # Cogemos nuestra variable a elegir
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(ventas_altas2~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$ventas_altas2,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$ventas_altas2)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
regresionlog
summary(regresionlog)
confusionMatrix(datostst$prediccionlog, datostst$Churn)
aciertolog # Nos devuelve los 5 accuracies de cada fold de la VALIDACIÓN CRUZADA
mean(aciertolog)
# Importamos datos Ventas.RData
load("Ventas.RData")
# save(datos2,file = "aaaa.RData") Ejemplo de salvar un dataframe
datos = datos
datos$ventas_altas2[datos$ventas_altas=="Si"]=1
datos$ventas_altas2[datos$ventas_altas=="No"]=0
datos$ventas_altas=NULL
datos$ventas_altas2 = as.factor(datos$ventas_altas2)
datos$US2[datos$US=="Yes"]=1
datos$US2[datos$US=="No"]=0
datos$US=NULL
datos$Urbain2=as.numeric(datos$Urban=="Yes")
datos$Urbain= NULL
aciertolog=c()
indice = createMultiFolds(datos$ventas_altas2, k = 5, times = 1) # Cogemos nuestra variable a elegir
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(ventas_altas2~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$ventas_altas2,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$ventas_altas2)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
regresionlog
summary(regresionlog)
confusionMatrix(datostst$prediccionlog, datostst$Churn)
aciertolog # Nos devuelve los 5 accuracies de cada fold de la VALIDACIÓN CRUZADA
mean(aciertolog)
# Tenemos que hayar las variables categóricas y pasarlas a números
datos = read.csv("churn.csv",stringsAsFactors = TRUE)
datos$Churn2[datos$Churn=="False."]=0
datos$Churn2[datos$Churn=="True."]=1
# Importamos datos Ventas.RData
load("Ventas.RData")
# save(datos2,file = "aaaa.RData") Ejemplo de salvar un dataframe
datos = datos
datos$ventas_altas2[datos$ventas_altas=="Si"]=1
datos$ventas_altas2[datos$ventas_altas=="No"]=0
datos$ventas_altas=NULL
datos$ventas_altas2 = as.factor(datos$ventas_altas2)
datos$US2[datos$US=="Yes"]=1
datos$US2[datos$US=="No"]=0
datos$US=NULL
datos$Urbain2=as.numeric(datos$Urban=="Yes")
datos$Urbain= NULL
# Convertir ShelveLoc en una variable ordinal con valores específicos
datos$ShelveLoc <- factor(datos$ShelveLoc, levels = c("Bad", "Medium", "Good"), ordered = TRUE)
datos$ShelveLoc <- as.numeric(datos$ShelveLoc)  # Convertir a valores numéricos
aciertolog=c()
indice = createMultiFolds(datos$ventas_altas2, k = 5, times = 1) # Cogemos nuestra variable a elegir
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(ventas_altas2~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$ventas_altas2,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$ventas_altas2)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
regresionlog
summary(regresionlog)
confusionMatrix(datostst$prediccionlog, datostst$Churn)
aciertolog # Nos devuelve los 5 accuracies de cada fold de la VALIDACIÓN CRUZADA
mean(aciertolog)
aciertolog=c()
indice = createMultiFolds(datos$ventas_altas2, k = 5, times = 1) # Cogemos nuestra variable a elegir
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(ventas_altas2~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$ventas_altas2,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$ventas_altas2)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
regresionlog
summary(regresionlog)
confusionMatrix(datostst$prediccionlog, datostst$Churn)
aciertolog # Nos devuelve los 5 accuracies de cada fold de la VALIDACIÓN CRUZADA
mean(aciertolog)
setwd("~/01_CODE/___AI-BIG-DATA___/03-Modelos-de-IA/02-Modelos-Supervisados-Clasificacion")
rm(list=ls())
# Tenemos que hayar las variables categóricas y pasarlas a números
datos = read.csv("churn.csv",stringsAsFactors = TRUE)
datos$Churn2[datos$Churn=="False."]=0
datos$Churn2[datos$Churn=="True."]=1
datos$Churn=NULL
datos$Churn2=as.factor(datos$Churn2)
datos$Int.l.Plan2[datos$Int.l.Plan=="no"]=0
datos$Int.l.Plan2[datos$Int.l.Plan=="yes"]=1
datos$Int.l.Plan=NULL
datos$VMail.Plan=as.numeric(datos$VMail.Plan=="yes")
datos$State=NULL
datos$Area.Code=NULL
datos$Phone=NULL
datos$Account.Length=NULL
aciertolog=c()
indice = createMultiFolds(datos$Churn2, k = 5, times = 1) # Cogemos nuestra variable a elegir
for (i in 1:length(indice)){
datostrain = datos[ indice[[i]],]
datostst = datos[-indice[[i]],]
regresionlog = glm(Churn2~., data=datostrain,family=binomial)
prediccionlog <- predict(regresionlog,datostst,type = "response")
datostst$prediccionlog=0
datostst$prediccionlog[prediccionlog>0.5]=1
datostst$prediccionlog=as.factor(datostst$prediccionlog)
resultadoslog=cbind.data.frame(datostst$Churn2,datostst$prediccionlog,prediccionlog)
#confusionMatrix(datostst$prediccionlog, datostst$Churn2)
resultado   = confusionMatrix(datostst$prediccionlog, datostst$Churn2)$overall[1]
aciertolog = rbind(aciertolog,c(resultado))
}
regresionlog
summary(regresionlog)
confusionMatrix(datostst$prediccionlog, datostst$Churn)
