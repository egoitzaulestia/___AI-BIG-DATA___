#Mostrar el cuarto valor de ese elemento
personas_4_element <- print(Personas[[2]][[4]])
#Mostrar el ultimo elemento de la primera variable
personas_last_element<- print(Personas[[1]][[3]])
#6 Crear una matriz de 4x4 y realizar las siguientes tareas:
#Mostrar la matriz en la consola
matrix.1 <- matrix(10:30, nrow=4, ncol=4, byrow=TRUE)
matrix.1
#Extraer los atributos
atributos.1 <-attributes(matrix.1)
atributos.1
#Crear una nueva matriz con las dos primeras filas
matrix.2 <- matrix.1[1:2,]
matrix.2
#Crear una nueva matriz con las dos primeras columnas
matrix.2.1<- matrix.1[,1:2]
matrix.2.1
#Crear una nueva matriz con las dos primeras filas y las tres primeras columnas
matrix.2.3 <- matrix.1[1:2,1:3]
matrix.2.3
#Añadir una nueva columna
matrix.new <- cbind(matrix.1, "coca")
matrix.new
#Añadir una nueva fila
matrix.new.1 <- rbind(matrix.new, "cola")
matrix.new.1
#7- Crear un factor con las notas qu se pueden sacar en la universidad(SS, AP, NT,SB, y MH
#y realizar las siguientes tareas
#calcular el numero de opciones existentes
calificaciones<- factor(c("SS", "AP","NT","SB","MH"))
options<- length(levels(calificaciones))
options
#Mostrar los distintos niveles
calevels<- levels(calificaciones)
calevels
#mostrar el tercer nivel
calevel3<-levels(calificaciones)[3]
calevel3
#Sustituir "NT" por "Notable"
calificaciones_Notable <- gsub("NT","Notable", calificaciones)
calificaciones_Notable
#8 Crear un DataFrame de 4 variables (Nombre del Jugador, Equipo, Posición y Edad) y 8observaciones (Jugadores) y realizar las siguientes tareas:
#Visualizarlo por consola
Jugadores <- data.frame(
Nombre = c("Ronaldo", "Messi", "Ronaldinho", "Neymar", "Mbappe","Casillas", "Lloris", "Lewandowski"),
Equipo = c("Madrid", "Barça","Barça","Paris Saint-Germain", "Paris Saint-Germain", "Madrid","Tottenham", "Barça"),
Posición = c("Delantero", "Mediocampista", "Delantero", "Delantero", "Delantero", "Portero","Portero", "Delantero"),
Edad = c(38, 36, 43, 31, 24, 42, 36, 35)
)
Jugadores
#contar el numero de filas
filas <- nrow(Jugadores)
filas
#contar el numero de columnas
columnas <- ncol(Jugadores)
columnas
#calcular las dimensiones
dimensiones <- dim.data.frame(Jugadores)
dimensiones
#cambiar el nombre de las variables a (Nombre, Team, Especialidad y Años)
colnames(Jugadores) <- new_col_names <- c("Nombre", "Team", "Especialidad", "Años")
Jugadores
#Seleccionar aquellos jugadores mayores de 25 años
Jugadores[Jugadores$Años>25,]
#Seleccionar aquellos jugadores de menos de 25 años y mayores de 20
entre20y25 <- subset(Jugadores, Años <25 & Años>20)
entre20y25
#Seleccionar aquellos jugadores de menos de 25 años y que sean delanteros
delantero25 <- subset(Jugadores, Años <25 & Especialidad == "Delantero")
delantero25
#Seleccionar aquellos jugadores de menos de 25 o que sean porteros
portero25 <- subset(Jugadores, Años <25 | Especialidad == "Portero")
portero25
#9 Crear las siguiented funciones:
#Determine el area de un circulo
Circulo <- function(radius) {
if (radius<0) {
return("Usa numeros no negativos")}
area <- pi*radius^2
return(area)
}
area<- Circulo(5)
area
area<- Circulo(-1)
area
#Determine el area de un rectangulo
Rectangulo <- function(lado){
if(lado<0){
return("Usa numeros no negativos")}
area2 <- lado^2
return(area2)
}
area2<- Rectangulo(-4)
area2
area2<- Rectangulo(5)
area2
#Resuelva una ecuacion de segundo grado
Segundo <- function(x){
resultado <- (x^2+5*x-7)
return(resultado)
}
resultado<- Segundo(10)
resultado
resultado<- Segundo(-4)
resultado
#Determine el perimetro de una circunferencia
Perimetro <- function(r){
if(r<0){
return("Usa numeros no negativos")}
result <- 2*pi*r
return(result)
}
result<- Perimetro(4)
result
result<- Perimetro(-100)
result
Tipo_de_letra <- function(letra){
letra<- tolower(letra)
if (letra %in% c("a","e","i","o","u")){
result3<- "Es una vocal"
}else if(letra == "y"){
result3<- "Es una y griega"
}else if(letra %in% letters){
result3<- "Es una consonante"
}else{
result3 <- "Verifica que la entrada sea una letra"
}
return(result3)
}
result3<- Tipo_de_letra(1)
result3
result3<- Tipo_de_letra("Y")
result3
result3 <- Tipo_de_letra("a")
result3
result3 <- Tipo_de_letra("b")
result3
mylist<-list(name="Luis,Jaime,Miguel,Blanca,Iñigo",age=c(19,19,20,20,20),height=c(1.73,1.76,1.81,1.65,1.74))
if(z=="a"| z=="e"| z=="i"| z=="o"| z=="u"){}
mylist <- list(c("Eduardo","Marcello","Elias","Andres","Jacobo"), age=(c(22,21,20,19,18)),
height=(c(186,182,171,186,180)))
names(mylist) <- c("Nombre", "Edad", "Altura")
mylist
attributes(mylist)
mylist[2]
mylist[[2]][4]
mylist[[1]][5]
mdat <- matrix(c(3,4,6,8,  1,12,7,10,  9,8,5,3, 1,2,5,7),
nrow = 4, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2", "row3", "row4"),
c("V1", "V2", "V3", "V4")))
mdat
attributes(mdat)
mdat[c(1,2),]
mdat[ ,c(1,2)]
mdat[c(1,2),c(1,2,3)]
mdat <- cbind(mdat, C5=0)
mdat <- rbind(mdat, R5=0)
mdat
NOTAS <- factor(c("SS","NT","NT","SS","AP","NT","SB","MH"),
levels = c("SS","AP","NT","SB","MH"))
nlevels(NOTAS)
levels(NOTAS)
levels(NOTAS)[3]
levels(NOTAS)[3]<-"Notable"
futbol <- data.frame(Jugador= c("Andres","Jose","Eduardo","Victor","Javier","Martin", "Denis", "Federico"),
Equipo= c("Real Madrid","Barcelona","Juventus","Milan","Chelsea","Liverpool","Bayern","Chelsea") ,
Posicion= c("Delantero","Defensa","Mediocampo","Portero","Mediocampo","Defensa","Delantero","Portero"),
Edad= c(23,35,18,22,37,24,22,36) )
nrow(futbol)
ncol(futbol)
dim(futbol)
colnames(futbol)<- c("Nombre","Team","Especialidad","Años")
futbol[futbol$Años>25,]
futbol[futbol$Años<25&futbol$Años>20,]
futbol[futbol$Años<25&futbol$Especialidad=="A",]
futbol[futbol$Años<25 | futbol$Especialidad=="A",]
AreaCirculo = function(x) {pi*x^2}
AreaRectangulo = function(A,B){A*B}
eq = function(w,y) {w^2+y}
eq(3,5)
Circunferencia = function(r) {2*pi*r}
Circunferencia(5)
# 10
p <- "e"
if(p=="a" | p=="e" | p=="i" | p=="o" | p=="u"){
print("Es una vocal")
} else if (p=="y") {
print("es una Y griega")
} else{
print("Es una consonante")
}
#Ejercicio 5
# Crear una lista con nombres, edad y altura
lista_personas <- list(nombres = c("Andrés", "Jesús", "Maribel", "Ángel", "Adriana"),edades = c(23, 50, 30, 80, 19),alturas = c(182.5, 170, 177, 160, 150))
# Mostrar los atributos de la lista de dos formas diferentes
print(lista_personas)
str(lista_personas)
# Mostrar el segundo elemento de la lista
segundo_elemento <- lista_personas[[2]]
print(segundo_elemento)
# Mostrar el cuarto valor de ese elemento
cuarto_valor <- segundo_elemento[4]
print(cuarto_valor)
# Mostrar el último elemento de la primera variable
ultimo_nombre <- tail(lista_personas$nombres, n = 1)
print(ultimo_nombre)
#Ejercicio 6
#Crear una matriz 4x4
matriz <- matrix(1:16, nrow = 4, ncol = 4)
#Mostrar la matriz en la consola
print(matriz)
#Crear una nueva matriz con las dos primeras filas
nueva_matriz_filas <- matriz[1:2,]
print(nueva_matriz_filas)
#Crear una nueva matriz con las dos primeras columnas
nueva_matriz_columnas <- matriz[,1:2]
print(nueva_matriz_columnas)
#Añadir una nueva columna
nueva_columna <- c(17, 18, 19, 20)
matriz_con_nueva_columna <- cbind(matriz, nueva_columna)
print(matriz_con_nueva_columna)
#Añadir una nueva fila
nueva_fila <- c(21, 22, 23, 24)
matriz_con_nueva_fila <- rbind(matriz, nueva_fila)
print(matriz_con_nueva_fila)
#Ejercicio 7
notas <- factor(c("SS", "AP", "NT", "SB", "MH"))
# Calcular el número de opciones existentes
num_opciones <- length(levels(notas))
print(num_opciones)
# Mostrar los distintos niveles
distintos_niveles <- levels(notas)
print(distintos_niveles)
# Mostrar el tercer nivel
tercer_nivel <- distintos_niveles[3]
print(tercer_nivel)
# Sustituir "NT" por "Notable"
notas_modificadas <- as.factor(replace(notas, notas == "NT", "Notable"))
print(notas_modificadas)
#Ejercicio 8
jugadores_df <- data.frame(Nombre = c("Andres", "Biagio", "Isabel", "Juan Antonio", "Ignacio", "Eduardo", "Paco", "Maria", "Jose", "Tete"),Team = c("unav", "upna", "Madrid", "A coruña", "celeste", "Aranjuez", "Barcelona", "Madrid", "Toledo", "amarillo"),Especialidad = c("Defensa", "Lateral", "Portera", "Banquillo", "Portero", "Portero", "Lateral", "Portera", "Banquillo", "Portero"),Años = c(23, 19, 27, 40, 24, 28, 29, 21, 23, 24))
# Visualizar el DataFrame por consola
print(jugadores_df)
# Contar el número de filas
num_filas <- nrow(jugadores_df)
print(num_filas)
# Contar el número de columnas
num_columnas <- ncol(jugadores_df)
print(num_columnas)
#Calcular las dimensiones
dimensiones_df <- dim(jugadores_df)
print(dimensiones_df)
#Cambiar el nombre de las variables
colnames(jugadores_df) <- c("Nombre", "Team", "Especialidad", "Años")
print(jugadores_df)
#Seleccionar jugadores mayores de 25 años
mayores_25 <- jugadores_df[jugadores_df$Años > 25, ]
print(mayores_25)
#Seleccionar jugadores de menos de 25 años y mayores de 20
entre_20_y_25 <- jugadores_df[jugadores_df$Años < 25 & jugadores_df$Años > 20, ]
print(entre_20_y_25)
#Seleccionar jugadores de menos de 25 años y con especialidad determinada
especialidad_determinada <- jugadores_df[jugadores_df$Años < 25 & jugadores_df$Especialidad == "Portero", ]
print(especialidad_determinada)
#Seleccionar jugadores de menos de 25 años o con especialidad determinada
menor_25_o_especialidad <- jugadores_df[jugadores_df$Años < 25 | jugadores_df$Especialidad == "Banquillo", ]
print(menor_25_o_especialidad)
#Ejercicio 9
# Función para el área de un círculo
area_circulo <- function(radio) {pi * radio^2}
# Función para determinar el área de un rectángulo
area_rectangulo <- function(base, altura) {base * altura}
resolver_ecuacion_segundo_grado <- function(a, b, c) {
# Calculo deñ discriminante
discriminante <- b^2 - 4 * a * c
# Verifica si hay soluciones reales
if (discriminante < 0) {
return("No hay soluciones reales")
} else {
# Calcula las soluciones
x1 <- (-b + sqrt(discriminante)) / (2 * a)
x2 <- (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2))
}
}
# Función para el perímetro de una circunferencia
perimetro_circunferencia <- function(radio) {2 * pi * radio}
# Función para el perímetro de una circunferencia
perimetro_circunferencia <- function(radio) {2 * pi * radio}
# Perímetro de una circunferencia con radio 7
perimetro_circunferencia_7 <- perimetro_circunferencia(7)
print(perimetro_circunferencia_7)
#Ejercicio 10
clasificar_letra <- function(letra) {
# Convertir la letra a minúscula para simplificar la comparación
letra <- tolower(letra)
if (letra %in% c("a", "e", "i", "o", "u")) {
return("Vocal")
} else if (letra == "y") {
return("Y griega")
} else {
return("Consonante")
}
}
clasificar_letra <- function(letra) {
letra <- tolower(letra)
if (letra %in% c("a", "e", "i", "o", "u")) {
return("Vocal")
} else if (letra == "y") {
return("Y griega")
} else {
return("Consonante")
}
}
letra1 <- "a"
resultado1 <- clasificar_letra(letra1)
print(paste(letra1, "es", resultado1))
letra2 <- "y"
resultado2 <- clasificar_letra(letra2)
print(paste(letra2, "es", resultado2))
letra3 <- "g"
resultado3 <- clasificar_letra(letra3)
print(paste(letra3, "es", resultado3))
Data8 <-data.frame(Jugador= c("Cristobal","Gea","Bernat","Boris","Max","Leo","Marc","León"),
Equipo= c("Barcelona","Mallorca","Manchester city","CSK Sofia","Chelsea","Atletico de Madrid","Leicester","Athletic club de Bilbao"),
Posición= c("Delantero","Portero","Defensa","Delantero","Delantero","Mediocentro","Mediocentro","Mediocentro"),
Edades= c(23,22,20,21,25,26,18,19))
letra <- "o"
if (letra=="a"){print("La letra es vocal")} else if(letra=="e"){print("La letra es vocal")
}else if(letra=="i") {print("La letra es vocal")} else if(letra=="o"){print("La letra es vocal")
}else if(letra=="u"){print("La letra es vocal")} else if(letra=="y"){print("La letra es la Y griega")
}else{print("La letra es una consonante")}
if (letra %in% c("a","e","i","o","u")) {
print(paste0("La letra es una vocal"))
} else if (letra=="y"){
print(paste0("La letra es la letra 'Y' griega"))
} else {
print(paste0("La letra es una consonante"))
}
letra <- "a"
letra <- tolower(letra)
if (letra %in% c("a", "e", "i", "o", "u")) {
print(paste0("Vocal"))
} else if (letra=="y"){
print(paste0("'Y' griega"))
} else {
print(paste0("Consonante"))
}
mydata <- data.frame(x=c("messi","cristiano","benzema","oyarzabal","zubimendi",
"takekubo","barrenetxea","turrientes"),
y=c("real sociedad","real madrid","getafe","PSG","Sevilla",
"Betis","Espanyol","Barça"), z=c("defensa lateral",
"defensa central","delantero lateral","delantero central",
"banda derecha","banda izquierda","portero","medio centro"),
m=c(39,30,34,26,21,23,20,19))
mydata
#10 condition
m="b"
if(m=="a"){print("vocal")} else if (m=="e"){print("vocal")}
p <- "e"
if(p=="a" | p=="e" | p=="i" | p=="o" | p=="u"){
print("Es una vocal")
} else if (p=="y") {
print("es una Y griega")
} else{
print("Es una consonante")
}
jugadores_elmundo <- data.frame( "Nombre del Jugador" = c("Messi","Neymar", "Busquets", "Iniesta", "Araújo", "Sergio Asensio", "Kylian Mbappé", "Haaland")
, "Equipo" = c("Inter Miami","Al-Hilal","Inter Miami","Emirates Club","Futbol Club Barcelona","Real Madrid","Paris Saint Germain","Manchester City")
, "Posición" = c("Delantero","Delantero","Centrocampista","Centrocampista","Defensa", "Delantero","Delantero", "Delantero")
, "Edad" = c(36,31,35,39,24,27,24,23))
print(jugadores_elmundo)
nrow(jugadores_elmundo)
ncol(jugadores_elmundo)
dim(jugadores_elmundo)
colnames(jugadores_elmundo) <- c("Name","Team","Especialidad","Años")
jugadores_elmundo[jugadores_elmundo$Años > 25,]
jugadores_elmundo[jugadores_elmundo$Años < 25 & jugadores_elmundo$Años > 20,]
jugadores_elmundo[jugadores_elmundo$Años < 25 & jugadores_elmundo$Especialidad == "Defensa",]
jugadores_elmundo[jugadores_elmundo$Años < 25 | jugadores_elmundo$Especialidad == "Delantero",]
Area_circulo <- function (r){
pi * r ^ 2
}
area_rectangulo <- function (b,h) {
b*h
}
solución_ecuación2grado <- function (a,b,c){
resultado1 <- (-b+(b**2-4*a*c)**0.5)/a^2
resultado2 <- (-b-(b**2-4*a*c)**0.5)/a^2
c(resultado1, resultado2)
}
solución_ecuación2grado (2,-1,-2)
perimetro_circunferencia <- function (r){
2 * pi * r
}
perimetro_circunferencia(2)
letra = "a"
if(letra=="a"|letra=="e"|letra=="i"|letra=="o"|letra=="u"){
print("vocal")
}else if(letra=="Y"){
print("Y griega")
}else{
print("consonante")
}
#Ejercicio 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
m= "y"
if (m=="a"|m=="e"|m=="i"|m=="o"|m=="u"){
print("vocal")
}else if (m=="y"){print("Y griega")
}else{print("consonante")}
#Exercise 10
m="e"
if(m=="a"){print("vocal")} else if (m=="e"){print("vocal")
} else if (m=="i"){print("vocal")} else if (m=="o"){print("vocal")
} else if (m=="u"){print("vocal")} else if (m=="y"){print("y griega")} else{print("consonant")}
shiny::runApp('Formacion_R/Shiny_MED/Shiny_Titanic')
datos = read.csv("train.csv")
setwd("~/Formacion_R/Shiny_MED/Shiny_Titanic")
datos = read.csv("train.csv")
runApp()
View(datos)
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(datos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Formacion_R/Shiny_MED/28-Insertar_html')
mtcars
runApp('~/Formacion_R/Shiny_MED/23-Graficos (Boxplot).R')
runApp('~/Formacion_R/Shiny_MED/30-CrearReporte')
runApp('~/Formacion_R/Shiny_MED/31-optgroup-server')
runApp('~/Formacion_R/Shiny_MED/32-CategoriasSelectores')
runApp('~/Formacion_R/Shiny_MED/33-Mover_Paneles')
runApp('~/Formacion_R/Shiny_MED/34-Conditionalpanel')
runApp('~/Formacion_R/Shiny_MED/34-Conditionalpanel')
runApp('~/Formacion_R/Shiny_MED/34-Conditionalpanel')
runApp('~/Formacion_R/Shiny_MED/35-IncluirOtrosTextos')
runApp('~/Formacion_R/Shiny_MED/36-isolate-vs-no_isolate')
# k-means only works with numerical variables,
# so don't give the user the option to select
# a categorical variable
vars <- setdiff(names(iris), "Species")
vars
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example')
runApp('~/Formacion_R/Shiny_MED/38-GraficoDinamico')
runApp('~/Formacion_R/Shiny_MED/39-VariasPestaña_Imagen')
runApp('~/Formacion_R/Shiny_MED/39-VariasPestaña_Imagen')
runApp('~/Formacion_R/Shiny_MED/39-VariasPestaña_Imagen')
dataset <- diamonds
runApp('~/Formacion_R/Shiny_MED/40-GraficosDinamicos')
dataset <- diamonds
View(dataset)
runApp('~/Formacion_R/Shiny_MED/40-GraficosDinamicos')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app2.R')
runApp('app2.R')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp()
runApp()
runApp('app2.R')
runApp('app3.R')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/37-kmeans-example - copia')
runApp('~/Formacion_R/Shiny_MED/41-Simulaciones')
runApp('~/Formacion_R/Shiny_MED/42-Alerta_js')
runApp('~/Formacion_R/Shiny_MED/Shiny_HP')
