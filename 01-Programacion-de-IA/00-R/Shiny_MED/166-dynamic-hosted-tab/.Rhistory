# Calcular la integral para verificar si es igual a 1
result <- integrate(f, lower = 0, upper = 1)
cat("Integral de f(x) en [0,1]:", result$value, "\n")
# Graficar la función
curve(f, from = -0.5, to = 1.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray")
cat("Dado que la función tiene un pico en x=0.5 y es simétrica,
se pueden estimar las probabilidades aproximadas visualizando el área bajo la curva.
Usa el código del gráfico anterior para observar las probabilidades aproximadas.")
# Graficar la función con área sombreada
curve(f, from = 0, to = 1, col = "blue", lwd = 2,
main = "Probabilidad entre [0.4, 0.7]",
xlab = "x", ylab = "f(x)")
polygon(c(0.4, seq(0.4, 0.7, length=100), 0.7),
c(0, f(seq(0.4, 0.7, length=100)), 0),
col = rgb(0.2, 0.8, 0.2, 0.5), border = NA)
# Calcular la probabilidad formalmente
p_04_07 <- integrate(f, lower = 0.4, upper = 0.7)
cat("P(0.4 <= X <= 0.7):", p_04_07$value, "\n")
# Definir la función de densidad
f <- function(x) {
ifelse(x >= 0 & x <= 2, 0.5 * x, 0)  # Modifica según la función específica
}
# a) Verificar que es una función de densidad válida
result <- integrate(f, lower = -Inf, upper = Inf)
cat("La integral de f(x) es:", result$value, "\n")
# b) Cálculo de probabilidades
# P(X < 1)
p_less_1 <- integrate(f, lower = 0, upper = 1)
cat("P(X < 1):", p_less_1$value, "\n")
# P(X > 0)
p_greater_0 <- integrate(f, lower = 0, upper = 2)
cat("P(X > 0):", p_greater_0$value, "\n")
# P(X = 1/4) -> Siempre es 0 para una v.a. continua
cat("P(X = 1/4):", 0, "\n")
# P(1/2 < X < 3/2)
p_between <- integrate(f, lower = 1/2, upper = 3/2)
cat("P(1/2 < X < 3/2):", p_between$value, "\n")
# c) Función de probabilidad acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x <= 2) {
integrate(f, lower = 0, upper = x)$value
} else {
return(1)
}
}
# Vectorizar para evaluar en múltiples puntos
F_vec <- Vectorize(F)
# Calcular la CDF en varios puntos
x_values <- seq(-1, 3, by = 0.1)
cdf_values <- F_vec(x_values)
# Graficar la función acumulada
plot(x_values, cdf_values, type = "l", col = "blue", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
# Función de densidad
f <- function(x) {
ifelse(x >= 0 & x < 1, 1/4,
ifelse(x >= 1 & x <= 2, x^3 / 5, 0))
}
# Graficar la función de densidad
curve(f, from = -0.5, to = 2.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# Función acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x < 1) {
return(integrate(f, lower = 0, upper = x)$value)
} else if (x <= 2) {
return(integrate(f, lower = 0, upper = 1)$value + integrate(f, lower = 1, upper = x)$value)
} else {
return(1)
}
}
# Vectorizar la función acumulada
F_vec <- Vectorize(F)
# Graficar la función acumulada
x_values <- seq(-0.5, 2.5, by = 0.1)
cdf_values <- F_vec(x_values)
plot(x_values, cdf_values, type = "l", col = "red", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# a) Calcula su función de densidad y gráfica.
# Función de densidad
f <- function(x) {
ifelse(x >= 6 & x <= 7, 1, 0)
}
# Graficar la función de densidad
curve(f, from = 5.5, to = 7.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x (hora de llegada)", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
ifelse(x < 6, 0,
ifelse(x <= 7, x - 6, 1))
# b) Calcula su función de probabilidad acumulada
# Función acumulada (CDF)
F <- function(x) {
ifelse(x < 6, 0,
ifelse(x <= 7, x - 6, 1))
}
# Graficar la función acumulada
curve(F, from = 5.5, to = 7.5, col = "red", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x (hora de llegada)", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# c) Calcula la probabilidad de que llegue antes de las 6 y 15
# Probabilidad de llegar antes de las 6:15
p_before_615 <- F(6.25)
cat("P(X <= 6:15):", p_before_615, "\n")
# c) Calcula la probabilidad de que llegue antes de las 6 y 15
# Probabilidad de llegar antes de las 6:15
p_before_615 <- F(6.25)
cat("P(X <= 6:15):", p_before_615, "\n")
# d) Calcula la probabilidad de que llegue después de las 6 y 30
# Probabilidad de llegar después de las 6:30
p_after_630 <- 1 - F(6.5)
cat("P(X > 6:30):", p_after_630, "\n")
# Sea X un número aleatorio con distribucisón uniforme en (0,5) y por tanto con una pdf de: f(x) = 1/5. Calcula P(2 ≤ X ≤ 4.5)
# Parámetros de la distribución
a <- 0  # límite inferior
b <- 5  # límite superior
f <- 1 / (b - a)  # densidad
# Intervalo de interés
c <- 2
d <- 4.5
# Cálculo de la probabilidad
P <- (d - c) * f
cat("P(2 <= X <= 4.5):", P, "\n")
# Definir parámetros
a <- 0      # Límite inferior del dial
b <- 360    # Límite superior del dial
f <- 1 / (b - a)  # Densidad uniforme
# Función para calcular la probabilidad
calc_prob <- function(c, d) {
P <- (d - c) * f
return(P)
}
# a) P(5 ≤ X ≤ 30)
P_a <- calc_prob(5, 30)
cat("P(5 ≤ X ≤ 30):", P_a, "\n")
# b) P(0 ≤ X ≤ 90)
P_b <- calc_prob(0, 90)
cat("P(0 ≤ X ≤ 90):", P_b, "\n")
# c) P(0 ≤ X ≤ 90) (Repetido, mismo cálculo que el anterior)
P_c <- calc_prob(0, 90)
cat("P(0 ≤ X ≤ 90) (repetido):", P_c, "\n")
# d) P(0 ≤ X ≤ 180)
P_d <- calc_prob(0, 180)
cat("P(0 ≤ X ≤ 180):", P_d, "\n")
# e) P(0 ≤ X ≤ 270)
P_e <- calc_prob(0, 270)
cat("P(0 ≤ X ≤ 270):", P_e, "\n")
# f) P(0 ≤ X ≤ 120)
P_f <- calc_prob(0, 120)
cat("P(0 ≤ X ≤ 120):", P_f, "\n")
# a) Verifica que f(x) es una función de densidad valida:
# Verificar que la integral de f(x) en el dominio [0, 1] es 1
f <- function(x) 3 * x^2
integral_f <- integrate(f, lower = 0, upper = 1)$value
cat("La integral de f(x) en [0, 1] es:", integral_f, "\n")
# b) CalculaP(x>2):
# Probabilidad de que X > 2
p_x_greater_2 <- 0
cat("P(X > 2):", p_x_greater_2, "\n")
# c) Calcula P(1/2 < x < 1):
# Probabilidad de que 1/2 < X < 1
p_half_to_1 <- integrate(f, lower = 0.5, upper = 1)$value
cat("P(1/2 < X < 1):", p_half_to_1, "\n")
# d) Calcula la función de densidad acumulada, F(x):
# Función acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x <= 1) {
return(x^3)  # Integral de 3x^2
} else {
return(1)
}
}
# Vectorizar la función para graficar
F_vec <- Vectorize(F)
# Graficar la CDF
curve(F_vec, from = -0.5, to = 1.5, col = "blue", lwd = 2,
main = "Función Acumulada F(x)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# e) ¿Cuáal es la esperanza de X, E(X)?
# Esperanza de X
E_X <- integrate(function(x) x * f(x), lower = 0, upper = 1)$value
cat("E(X):", E_X, "\n")
# Cálculo de la varianza
Var_X <- E_X2 - E_X^2
cat("Var(X):", Var_X, "\n")
# Cálculo de la varianza
Var_X <- E_X2 - E_X^2
# f) ¿y su varianza, Var(X)?
# Cálculo de E(X^2)
E_X2 <- integrate(function(x) x^2 * f(x), lower = 0, upper = 1)$value
# Cálculo de la varianza
Var_X <- E_X2 - E_X^2
cat("Var(X):", Var_X, "\n")
# a) Gráfica la pdf.
# Función de densidad
f <- function(x) {
if (x < -1 || x > 1) {
return(0)
} else if (x >= -1 && x < 0) {
return(x + 1)
} else if (x >= 0 && x <= 1) {
return(1 - x)
}
}
# Vectorizar la función para graficar
f_vec <- Vectorize(f)
# Graficar la PDF
curve(f_vec, from = -1.5, to = 1.5, col = "blue", lwd = 2,
main = "Función de Densidad (PDF)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# d) Gráfica esta última
# Graficar la CDF
curve(F_vec, from = -1.5, to = 1.5, col = "red", lwd = 2,
main = "Función Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# d) Gráfica esta última
# Graficar la CDF
curve(F_vec, from = -1.5, to = 1.5, col = "red", lwd = 2,
main = "Función Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# Limpiar el entorno de trabajo
rm(list=ls())
# Definir la función a trozos
f <- function(x) {
ifelse(x >= 0 & x <= 1, 6 * x * (1 - x), 0)
}
cat("Propiedad 1: f(x)≥0
Esto se cumple automáticamente al observar que 6x(1−x) es positivo en el intervalo [0,1].")
cat("Propiedad 2: Integral de f(x)=1
La integral será calculada directamente en R usando integrate().")
# Calcular la integral para verificar si es igual a 1
result <- integrate(f, lower = 0, upper = 1)
cat("Integral de f(x) en [0,1]:", result$value, "\n")
# Graficar la función
curve(f, from = -0.5, to = 1.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray")
cat("Dado que la función tiene un pico en x=0.5 y es simétrica,
se pueden estimar las probabilidades aproximadas visualizando el área bajo la curva.
Usa el código del gráfico anterior para observar las probabilidades aproximadas.")
# Graficar la función con área sombreada
curve(f, from = 0, to = 1, col = "blue", lwd = 2,
main = "Probabilidad entre [0.4, 0.7]",
xlab = "x", ylab = "f(x)")
polygon(c(0.4, seq(0.4, 0.7, length=100), 0.7),
c(0, f(seq(0.4, 0.7, length=100)), 0),
col = rgb(0.2, 0.8, 0.2, 0.5), border = NA)
# Calcular la probabilidad formalmente
p_04_07 <- integrate(f, lower = 0.4, upper = 0.7)
cat("P(0.4 <= X <= 0.7):", p_04_07$value, "\n")
# Definir la función de densidad
f <- function(x) {
ifelse(x >= 0 & x <= 2, 0.5 * x, 0)  # Modifica según la función específica
}
# a) Verificar que es una función de densidad válida
result <- integrate(f, lower = -Inf, upper = Inf)
cat("La integral de f(x) es:", result$value, "\n")
# b) Cálculo de probabilidades
# P(X < 1)
p_less_1 <- integrate(f, lower = 0, upper = 1)
cat("P(X < 1):", p_less_1$value, "\n")
# P(X > 0)
p_greater_0 <- integrate(f, lower = 0, upper = 2)
cat("P(X > 0):", p_greater_0$value, "\n")
# P(X = 1/4) -> Siempre es 0 para una v.a. continua
cat("P(X = 1/4):", 0, "\n")
# P(1/2 < X < 3/2)
p_between <- integrate(f, lower = 1/2, upper = 3/2)
cat("P(1/2 < X < 3/2):", p_between$value, "\n")
# c) Función de probabilidad acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x <= 2) {
integrate(f, lower = 0, upper = x)$value
} else {
return(1)
}
}
# Vectorizar para evaluar en múltiples puntos
F_vec <- Vectorize(F)
# Calcular la CDF en varios puntos
x_values <- seq(-1, 3, by = 0.1)
cdf_values <- F_vec(x_values)
# Graficar la función acumulada
plot(x_values, cdf_values, type = "l", col = "blue", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
# Función de densidad
f <- function(x) {
ifelse(x >= 0 & x < 1, 1/4,
ifelse(x >= 1 & x <= 2, x^3 / 5, 0))
}
# Graficar la función de densidad
curve(f, from = -0.5, to = 2.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# Función acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x < 1) {
return(integrate(f, lower = 0, upper = x)$value)
} else if (x <= 2) {
return(integrate(f, lower = 0, upper = 1)$value + integrate(f, lower = 1, upper = x)$value)
} else {
return(1)
}
}
# Vectorizar la función acumulada
F_vec <- Vectorize(F)
# Graficar la función acumulada
x_values <- seq(-0.5, 2.5, by = 0.1)
cdf_values <- F_vec(x_values)
plot(x_values, cdf_values, type = "l", col = "red", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# a) Calcula su función de densidad y gráfica.
# Función de densidad
f <- function(x) {
ifelse(x >= 6 & x <= 7, 1, 0)
}
# Graficar la función de densidad
curve(f, from = 5.5, to = 7.5, col = "blue", lwd = 2,
main = "Función de Densidad f(x)",
xlab = "x (hora de llegada)", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# b) Calcula su función de probabilidad acumulada
# Función acumulada (CDF)
F <- function(x) {
ifelse(x < 6, 0,
ifelse(x <= 7, x - 6, 1))
}
# Graficar la función acumulada
curve(F, from = 5.5, to = 7.5, col = "red", lwd = 2,
main = "Función de Probabilidad Acumulada (CDF)",
xlab = "x (hora de llegada)", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# c) Calcula la probabilidad de que llegue antes de las 6 y 15
# Probabilidad de llegar antes de las 6:15
p_before_615 <- F(6.25)
cat("P(X <= 6:15):", p_before_615, "\n")
# d) Calcula la probabilidad de que llegue después de las 6 y 30
# Probabilidad de llegar después de las 6:30
p_after_630 <- 1 - F(6.5)
cat("P(X > 6:30):", p_after_630, "\n")
# e) Calcula la esperanza
# Probabilidad de llegar después de las 6:30
p_after_630 <- 1 - F(6.5)
cat("P(X > 6:30):", p_after_630, "\n")
# Sea X un número aleatorio con distribucisón uniforme en (0,5) y por tanto con una pdf de: f(x) = 1/5. Calcula P(2 ≤ X ≤ 4.5)
# Parámetros de la distribución
a <- 0  # límite inferior
b <- 5  # límite superior
f <- 1 / (b - a)  # densidad
# Intervalo de interés
c <- 2
d <- 4.5
# Cálculo de la probabilidad
P <- (d - c) * f
cat("P(2 <= X <= 4.5):", P, "\n")
# Definir parámetros
a <- 0      # Límite inferior del dial
b <- 360    # Límite superior del dial
f <- 1 / (b - a)  # Densidad uniforme
# Función para calcular la probabilidad
calc_prob <- function(c, d) {
P <- (d - c) * f
return(P)
}
# a) P(5 ≤ X ≤ 30)
P_a <- calc_prob(5, 30)
cat("P(5 ≤ X ≤ 30):", P_a, "\n")
# b) P(0 ≤ X ≤ 90)
P_b <- calc_prob(0, 90)
cat("P(0 ≤ X ≤ 90):", P_b, "\n")
# c) P(0 ≤ X ≤ 90) (Repetido, mismo cálculo que el anterior)
P_c <- calc_prob(0, 90)
cat("P(0 ≤ X ≤ 90) (repetido):", P_c, "\n")
# d) P(0 ≤ X ≤ 180)
P_d <- calc_prob(0, 180)
cat("P(0 ≤ X ≤ 180):", P_d, "\n")
# e) P(0 ≤ X ≤ 270)
P_e <- calc_prob(0, 270)
cat("P(0 ≤ X ≤ 270):", P_e, "\n")
# f) P(0 ≤ X ≤ 120)
P_f <- calc_prob(0, 120)
cat("P(0 ≤ X ≤ 120):", P_f, "\n")
# a) Verifica que f(x) es una función de densidad valida:
# Verificar que la integral de f(x) en el dominio [0, 1] es 1
f <- function(x) 3 * x^2
integral_f <- integrate(f, lower = 0, upper = 1)$value
cat("La integral de f(x) en [0, 1] es:", integral_f, "\n")
# b) CalculaP(x>2):
# Probabilidad de que X > 2
p_x_greater_2 <- 0
cat("P(X > 2):", p_x_greater_2, "\n")
# c) Calcula P(1/2 < x < 1):
# Probabilidad de que 1/2 < X < 1
p_half_to_1 <- integrate(f, lower = 0.5, upper = 1)$value
cat("P(1/2 < X < 1):", p_half_to_1, "\n")
# d) Calcula la función de densidad acumulada, F(x):
# Función acumulada (CDF)
F <- function(x) {
if (x < 0) {
return(0)
} else if (x <= 1) {
return(x^3)  # Integral de 3x^2
} else {
return(1)
}
}
# Vectorizar la función para graficar
F_vec <- Vectorize(F)
# Graficar la CDF
curve(F_vec, from = -0.5, to = 1.5, col = "blue", lwd = 2,
main = "Función Acumulada F(x)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# e) ¿Cuáal es la esperanza de X, E(X)?
# Esperanza de X
E_X <- integrate(function(x) x * f(x), lower = 0, upper = 1)$value
cat("E(X):", E_X, "\n")
# f) ¿y su varianza, Var(X)?
# Cálculo de E(X^2)
E_X2 <- integrate(function(x) x^2 * f(x), lower = 0, upper = 1)$value
# Cálculo de la varianza
Var_X <- E_X2 - E_X^2
cat("Var(X):", Var_X, "\n")
# a) Gráfica la pdf.
# Función de densidad
f <- function(x) {
if (x < -1 || x > 1) {
return(0)
} else if (x >= -1 && x < 0) {
return(x + 1)
} else if (x >= 0 && x <= 1) {
return(1 - x)
}
}
# Vectorizar la función para graficar
f_vec <- Vectorize(f)
# Graficar la PDF
curve(f_vec, from = -1.5, to = 1.5, col = "blue", lwd = 2,
main = "Función de Densidad (PDF)",
xlab = "x", ylab = "f(x)")
abline(h = 0, col = "gray", lty = 2)
# b) Verifica si es válida
# Verificar la integral de f(x)
integral_f <- integrate(f_vec, lower = -1, upper = 1)$value
cat("La integral de f(x) en [-1, 1] es:", integral_f, "\n")
# c) Calcula su función de densidad acumulada, F(x)
# Función acumulada (CDF)
F <- function(x) {
if (x < -1) {
return(0)
} else if (x >= -1 && x < 0) {
return((x + 1)^2 / 2)
} else if (x >= 0 && x <= 1) {
return((x + 1)^2 / 2 + (x - x^2 / 2))
} else {
return(1)
}
}
# Vectorizar la función para graficar
F_vec <- Vectorize(F)
# d) Gráfica esta última
# Graficar la CDF
curve(F_vec, from = -1.5, to = 1.5, col = "red", lwd = 2,
main = "Función Acumulada (CDF)",
xlab = "x", ylab = "F(x)")
abline(h = c(0, 1), col = "gray", lty = 2)
# Siendo X una variable aleatoria continua con la siguientef(x), se pide calcular la su esperanza.
# Definir la función f(x)
f <- function(x) {
ifelse(x > 0 & x < 1, 2 * x, 0)
}
# Cálculo de E(X) mediante integración
E_X <- integrate(function(x) x * 2 * x, lower = 0, upper = 1)$value
cat("La esperanza E(X) es:", E_X, "\n")
# Calcular E(X)
E_X <- integrate(function(x) x * 2 * x, lower = 0, upper = 1)$value
# Calcular E(X^2)
E_X2 <- integrate(function(x) (x^2) * 2 * x, lower = 0, upper = 1)$value
# Calcular Var(X)
Var_X <- E_X2 - E_X^2
# Imprimir resultados
cat("Esperanza, E(X):", E_X, "\n")
cat("Varianza, Var(X):", Var_X, "\n")
shiny::runApp('01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-R/Shiny_MED/166-dynamic-hosted-tab')
