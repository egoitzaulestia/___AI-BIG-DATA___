# Mostrar el sistema de ecuaciones
showEqn(A2, b2)
rm(list=ls())
#1.paso: forma matricial
A = rbind(c(1,1,2),c(2,4,-3),c(3,6,-5))
A
cbind(c(1,2,3),c(1,4,6),c(2,-3,-5))
b = c(9,1,0)
ampli = cbind(A,b)
ampli
#2.paso: TEOREMA Rouche-Frobenius:
#Existen soluciones para el sistema (sistema compatible) SI Y SOLO SI
#el rango de la matriz completa es igual al rango de la matriz incompleta.
#y, si se cumple esto, entonces tenemos dos opciones:
#Si rg(A)= numero_incognitas -> unica solucion (determinado)
#Si no -> infinitas soluciones
qr(A)$rank == qr(ampli)$rank #existen soluciones
qr(A)$rank == ncol(A) #una unica solucion
#3.paso: funcion solve()
solucion = solve(A,b)
solucion
ampli
rm(list=ls())
#1.paso: forma matricial
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
ampli = cbind(A,b)
ampli
library(matlib)
showEqn(A,b) #mostrar el sistema de ecuaciones
R(A) #mostrar rango
R(ampli)
#comprobar si el sistema es compatible
all.equal(R(A),R(ampli))
R(A) == R(ampli) #compatible
#comprobar si el sistema es compatible determinado
R(A) == ncol(A) #determinado
#3.paso: funcion Solve()
solucion = Solve(A,b,fractions = TRUE)
#1.paso: forma matricial
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
showEqn(A,b)
#2.paso: aplicar la función correspondiente
plotEqn(A,b)
#punto de interseccion es la solucion del sistema.
solucion = Solve(A,b,fractions = TRUE)
solucion
#1.paso: forma matricial
A = rbind(c(4,2),c(1,-2),c(3,4))
b = c(3,2,1)
showEqn(A,b)
ampli=cbind(A,b)
ampli
R(A) == R(ampli)
R(A)==ncol(A)
#2.paso: aplicar la funcion correspondiente
plotEqn(A,b)
#punto de interseccion es la solucion del sistema.
solucion = Solve(A,b,fractions = TRUE)
solucion
#1.paso: forma matricial
A = rbind(c(1,1,2),c(2,4,-3),c(3,6,-5))
b = c(9,1,0)
showEqn(A,b)
ampli=cbind(A,b)
R(A) == R(ampli)
R(A)==ncol(A)
#2.paso: aplicar la funcion correspondiente
plotEqn3d(A,b,xlim = c(-3,3) ,ylim =c(0,6) )
rm(list=rm())
rm(list=ls())
library(matlib)
# Primer sistema
cat("Sistema 1:\n")
A1 <- rbind(c(1, -2, 1), c(0, 1, -2), c(0, 0, 2))
b1 <- c(0, 1, 6)
ampliada1 <- cbind(A1, b1)
# Mostrar el sistema de ecuaciones
showEqn(A1, b1)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A1 <- R(A1)
rango_ampliada1 <- R(ampliada1)
compatible1 <- rango_A1 == rango_ampliada1
determinado1 <- rango_A1 == ncol(A1)
cat("¿Es el sistema compatible?", compatible1, "\n")
cat("¿Es el sistema compatible determinado?", determinado1, "\n")
# Resolver si es compatible determinado
if (compatible1 && determinado1) {
solucion1 <- Solve(A1, b1, fractions = TRUE)
cat("Solución del sistema 1:\n")
print(solucion1)
} else {
cat("El sistema 1 es compatible indeterminado o incompatible.\n")
}
cat("\n-----------------------------------\n")
# Segundo sistema
cat("Sistema 2:\n")
A2 <- rbind(c(2, 1, -1), c(1, -2, 2), c(2, 1, 2))
b2 <- c(-3, 1, 5)
ampliada2 <- cbind(A2, b2)
# Mostrar el sistema de ecuaciones
showEqn(A2, b2)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A2 <- R(A2)
rango_ampliada2 <- R(ampliada2)
compatible2 <- rango_A2 == rango_ampliada2
determinado2 <- rango_A2 == ncol(A2)
cat("¿Es el sistema compatible?", compatible2, "\n")
cat("¿Es el sistema compatible determinado?", determinado2, "\n")
# Resolver si es compatible determinado
if (compatible2 && determinado2) {
solucion2 <- Solve(A2, b2, fractions = TRUE)
cat("Solución del sistema 2:\n")
print(solucion2)
} else {
cat("El sistema 2 es compatible indeterminado o incompatible.\n")
}
cat("\n-----------------------------------\n")
# Tercer sistema
cat("Sistema 3:\n")
A3 <- rbind(c(1, 2), c(1, -1))
b3 <- c(2, 0)
ampliada3 <- cbind(A3, b3)
# Mostrar el sistema de ecuaciones
showEqn(A3, b3)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A3 <- R(A3)
rango_ampliada3 <- R(ampliada3)
compatible3 <- rango_A3 == rango_ampliada3
determinado3 <- rango_A3 == ncol(A3)
cat("¿Es el sistema compatible?", compatible3, "\n")
cat("¿Es el sistema compatible determinado?", determinado3, "\n")
# Resolver si es compatible determinado
if (compatible3 && determinado3) {
solucion3 <- Solve(A3, b3, fractions = TRUE)
cat("Solución del sistema 3:\n")
print(solucion3)
# Graficar el sistema
plotEqn(A3, b3)
} else {
cat("El sistema 3 es compatible indeterminado o incompatible.\n")
}
rm(list=ls())
library(matlib)
# Primer sistema
cat("Sistema 1:\n")
A1 <- rbind(c(1, -2, 1), c(0, 1, -2), c(0, 0, 2))
b1 <- c(0, 1, 6)
ampliada1 <- cbind(A1, b1)
# Mostrar el sistema de ecuaciones
showEqn(A1, b1)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A1 <- R(A1)
rango_ampliada1 <- R(ampliada1)
compatible1 <- rango_A1 == rango_ampliada1
determinado1 <- rango_A1 == ncol(A1)
cat("¿Es el sistema compatible?", compatible1, "\n")
cat("¿Es el sistema compatible determinado?", determinado1, "\n")
# Resolver si es compatible determinado
if (compatible1 && determinado1) {
solucion1 <- Solve(A1, b1, fractions = TRUE)
cat("Solución del sistema 1:\n")
print(solucion1)
} else {
cat("El sistema 1 es compatible indeterminado o incompatible.\n")
}
cat("\n-----------------------------------\n")
# Segundo sistema
cat("Sistema 2:\n")
A2 <- rbind(c(2, 1, -1), c(1, -2, 2), c(2, 1, 2))
b2 <- c(-3, 1, 5)
ampliada2 <- cbind(A2, b2)
# Mostrar el sistema de ecuaciones
showEqn(A2, b2)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A2 <- R(A2)
rango_ampliada2 <- R(ampliada2)
compatible2 <- rango_A2 == rango_ampliada2
determinado2 <- rango_A2 == ncol(A2)
cat("¿Es el sistema compatible?", compatible2, "\n")
cat("¿Es el sistema compatible determinado?", determinado2, "\n")
# Resolver si es compatible determinado
if (compatible2 && determinado2) {
solucion2 <- Solve(A2, b2, fractions = TRUE)
cat("Solución del sistema 2:\n")
print(solucion2)
} else {
cat("El sistema 2 es compatible indeterminado o incompatible.\n")
}
cat("\n-----------------------------------\n")
# Tercer sistema
cat("Sistema 3:\n")
A3 <- rbind(c(1, 2), c(1, -1))
b3 <- c(2, 0)
ampliada3 <- cbind(A3, b3)
# Mostrar el sistema de ecuaciones
showEqn(A3, b3)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A3 <- R(A3)
rango_ampliada3 <- R(ampliada3)
compatible3 <- rango_A3 == rango_ampliada3
determinado3 <- rango_A3 == ncol(A3)
cat("¿Es el sistema compatible?", compatible3, "\n")
cat("¿Es el sistema compatible determinado?", determinado3, "\n")
# Resolver si es compatible determinado
if (compatible3 && determinado3) {
solucion3 <- Solve(A3, b3, fractions = TRUE)
cat("Solución del sistema 3:\n")
print(solucion3)
# Graficar el sistema
plotEqn(A3, b3)
} else {
cat("El sistema 3 es compatible indeterminado o incompatible.\n")
}
# Segundo sistema
cat("Sistema 2:\n")
A2 <- rbind(c(2, 1, -1), c(1, -2, 2), c(2, 1, 2))
b2 <- c(-3, 1, 5)
ampliada2 <- cbind(A2, b2)
# Mostrar el sistema de ecuaciones
showEqn(A2, b2)
# Verificar compatibilidad usando el Teorema de Rouché-Frobenius
rango_A2 <- R(A2)
rango_ampliada2 <- R(ampliada2)
compatible2 <- rango_A2 == rango_ampliada2
determinado2 <- rango_A2 == ncol(A2)
cat("¿Es el sistema compatible?", compatible2, "\n")
cat("¿Es el sistema compatible determinado?", determinado2, "\n")
# Resolver si es compatible determinado
if (compatible2 && determinado2) {
solucion2 <- Solve(A2, b2, fractions = TRUE)
cat("Solución del sistema 2:\n")
print(solucion2)
# Graficar el sistema
plotEqn(A3, b3)
} else {
cat("El sistema 2 es compatible indeterminado o incompatible.\n")
}
# Resolver si es compatible determinado
if (compatible2 && determinado2) {
solucion2 <- Solve(A2, b2, fractions = TRUE)
cat("Solución del sistema 2:\n")
print(solucion2)
# Graficar el sistema
plotEqn(A2, b2)
} else {
cat("El sistema 2 es compatible indeterminado o incompatible.\n")
}
rm(list=ls())
# Cargar librería matlib
library(matlib)
# Paso 1: Definir el sistema en forma matricial
A1 <- rbind(c(1, -2, 1), c(0, 1, -2), c(0, 0, 2))
b1 <- c(0, 1, 6)
ampli1 <- cbind(A1, b1)
# Paso 2: Verificar compatibilidad
R_A1 <- R(A1)
R_ampli1 <- R(ampli1)
compatible1 <- R_A1 == R_ampli1
determinado1 <- R_A1 == ncol(A1)
# Paso 3: Solución (si es compatible determinado)
if (compatible1 && determinado1) {
solucion1 <- Solve(A1, b1, fractions = TRUE)
print("Solución del Sistema 1:")
print(solucion1)
}
# Graficar en 3D si es compatible
if (ncol(A1) == 3 && compatible1) {
showEqn(A1, b1)
plotEqn3d(A1, b1, xlim = c(-5, 5), ylim = c(-5, 5), zlim = c(-5, 5))
}
# Paso 1: Definir el sistema en forma matricial
A2 <- rbind(c(2, 1, -1), c(1, -2, 2), c(2, 1, 2))
b2 <- c(-3, 1, 5)
ampli2 <- cbind(A2, b2)
# Paso 2: Verificar compatibilidad
R_A2 <- R(A2)
R_ampli2 <- R(ampli2)
compatible2 <- R_A2 == R_ampli2
determinado2 <- R_A2 == ncol(A2)
# Paso 3: Solución (si es compatible determinado)
if (compatible2 && determinado2) {
solucion2 <- Solve(A2, b2, fractions = TRUE)
print("Solución del Sistema 2:")
print(solucion2)
}
solucion2
# Graficar en 3D si es compatible
if (ncol(A2) == 3 && compatible2) {
showEqn(A2, b2)
plotEqn3d(A2, b2, xlim = c(-5, 5), ylim = c(-5, 5), zlim = c(-5, 5))
}
# Paso 1: Definir el sistema en forma matricial
A3 <- rbind(c(1, 2), c(1, -1))
b3 <- c(2, 0)
ampli3 <- cbind(A3, b3)
# Paso 2: Verificar compatibilidad
R_A3 <- R(A3)
R_ampli3 <- R(ampli3)
compatible3 <- R_A3 == R_ampli3
determinado3 <- R_A3 == ncol(A3)
# Paso 3: Solución (si es compatible determinado)
if (compatible3 && determinado3) {
solucion3 <- Solve(A3, b3, fractions = TRUE)
print("Solución del Sistema 3:")
print(solucion3)
}
# Graficar en 2D si es compatible
if (ncol(A3) == 2 && compatible3) {
showEqn(A3, b3)
plotEqn(A3, b3, xlim = c(-5, 5), ylim = c(-5, 5))
}
rm(list=ls())
#1.paso: forma matricial
A = rbind(c(1,1,2),c(2,4,-3),c(3,6,-5))
A
cbind(c(1,2,3),c(1,4,6),c(2,-3,-5))
b = c(9,1,0)
ampli = cbind(A,b)
ampli
#2.paso: TEOREMA Rouche-Frobenius:
#Existen soluciones para el sistema (sistema compatible) SI Y SOLO SI
#el rango de la matriz completa es igual al rango de la matriz incompleta.
#y, si se cumple esto, entonces tenemos dos opciones:
#Si rg(A)= numero_incognitas -> unica solucion (determinado)
#Si no -> infinitas soluciones
qr(A)$rank == qr(ampli)$rank #existen soluciones
qr(A)$rank == ncol(A) #una unica solucion
#3.paso: funcion solve()
solucion = solve(A,b)
solucion
ampli
rm(list=ls())
#1.paso: forma matricial
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
ampli = cbind(A,b)
ampli
library(matlib)
showEqn(A,b) #mostrar el sistema de ecuaciones
R(A) #mostrar rango
R(ampli)
#comprobar si el sistema es compatible
all.equal(R(A),R(ampli))
R(A) == R(ampli) #compatible
#comprobar si el sistema es compatible determinado
R(A) == ncol(A) #determinado
#3.paso: funcion Solve()
solucion = Solve(A,b,fractions = TRUE)
#1.paso: forma matricial
A = rbind(c(2,2),c(-1,1))
b = c(1,2)
showEqn(A,b)
#2.paso: aplicar la función correspondiente
plotEqn(A,b)
rm(list = ls())
# Definimos la matriz de coeficientes y el vector de términos independientes
A = matrix(c(1, 1, 0, 2), nrow = 2, byrow = TRUE)
A
b = c(4, 6)
b
# Resolvemos el sistema de ecuaciones
solucion = solve(A, b)
# Mostramos la solución
solucion
print("Sí, el vector (4, 6) una combinación lineal")
print("(4,6) = 1⋅(1,0 ) + 3⋅(1,2)")
rm(list = ls())
#1.Definir un vector: c()
x = c(1,2,3)
y = c(4,5,6)
#2.Dimensión de un vector: length()
dimension_x = length(x)
dimension_y = length(y)
#3.Sumar/restar vectores: + / -
#requisito! misma dimensión
suma = x+y
resta = x-y
#4.Producto por un escalar(número): *
xx=2*x
5*y
#5.Producto escalar de dos vectores:
a = c(1,2)
b = c(2,4)
# Siguiendo la estructura de la fórmula
productoEscalar = function(x,y){
if (length(x) == length(y)){
sum(x*y)
}
else{
print('No se puede calcular el producto escalar de estos dos vectores
porque no tienen la misma dimensión')
}
}
#Aplicamos la función a dos vectores que definimos nuevamente:
solucion = productoEscalar(a,b)
solucion
# Otra opción
sol2 = a%*%b
sol2
#6.1. Función Norm()
x = c(3,4)
library(pracma)
norma = Norm(x)
norma
#6.2. Función del producto escalar anteriormente definida
norma1 = sqrt(productoEscalar(x,x))
norma1
distancia = function(x,y){
if (length(x) == length(y)){
Norm(x-y)
}
else{
print('No se puede calcular la distancia entre los dos puntos
porque no tienen la misma dimensión,
los puntos no pertenecen al mismo espacio')
}
}
#Definimos dos puntos y calculamos la distancia entre ellos
a = c(0,0)
b = c(1,1)
distancia_a_b = distancia(a,b)
angulo_radianes = function(x,y){
if (length(x) == length(y)){
acos(x%*%y/((Norm(x)*Norm(y))))
}
else{
print('No se puede calcular el ángulo entre los dos vectores
porque no tienen la misma dimensión, no pertenecen al mismo espacio')
}
}
#Definimos dos vectores y calculamos el angulo que forman
p = c(1,0)
q = c(0,3)
radianes = angulo_radianes(p,q)
View(radianes)
#Pasamos los radianes a grados
grados = (radianes*360)/(2*pi)
grados
#2.Dimensión de un vector: length()
dimension_x = length(x)
dimension_y = length(y)
rm(list = ls())
#1.Definir un vector: c()
x = c(1,0,1)
y = c(3,1,-2)
#2.Dimensión de un vector: length()
dimension_x = length(x)
dimension_y = length(y)
#3.Sumar/restar vectores: + / -
#requisito! misma dimensión
suma = x+y
resta = x-y
suma
resta
# Siguiendo la estructura de la fórmula
productoEscalar = function(x,y){
if (length(x) == length(y)){
sum(x*y)
}
else{
print('No se puede calcular el producto escalar de estos dos vectores
porque no tienen la misma dimensión')
}
}
#Aplicamos la función a dos vectores que definimos nuevamente:
solucion = productoEscalar(x,y)
solucion
setwd("~/01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-R/00-intro-R/04-Trabajando-Fechas-R/ejercicios")
rm(list=ls())
df1 = read.csv("Ejemplo_4.csv", sep=";", header = TRUE,stringsAsFactors = TRUE)
show(df1)
summary(df1)
class(df1$CET)
df1$fecha <- as.POSIXct(as.character(df1$CET), format="%d/%m/%Y", tz="UTC")
perdidos = df1[is.na(df1$fecha),]
class(df1$fecha)
df1$anio = year(df1$fecha) # sacamos el año
df1$mes = month(df1$fecha) # saca el mes
df1$dia <- day(df1$fecha) # saca el día
plot(df1$anio, df1$Max.TemperatureC, main = "Temperaturas Máximas años 1997-2015 ", xlab = "Años", ylab = "Temperatura (Cº)")
plot(df1$mes, df1$Max.TemperatureC, main = "Temperaturas Máximas a lo largo del Año (12 meses), ", xlab = "Meses", ylab = "Temperatura (Cº)")
plot(df1$dia, df1$Max.TemperatureC, main = "Temperaturas Máximas a lo largo de los días del mes", xlab = "Meses", ylab = "Temperatura (Cº)")
df1$dsemana = wday(df1$fecha,week_start = 1) # Esto hace que el día de la semana empiece en 1 = Lunes
df1$finDeSemana[df1$dsemana == 6 | df1$dsemana == 7] = "Si"
df1$finDeSemana[df1$dsemana == 1 | df1$dsemana == 2 | df1$dsemana == 3 | df1$dsemana == 4 | df1$dsemana == 5] = "No"
class(df1$finDeSemana)
df1$finDeSemana = as.factor(df1$finDeSemana)
class(df1$finDeSemana)
plot(df1$finDeSemana, df1$Max.TemperatureC, main = "Temperaturas Máximas en función del día de la semana, ", xlab = "días de la semana", ylab = "Temperatura (Cº)")
# Al hacer na.rm nos aseguramos de que los valores faltantes (NA) se omitan en el cálculo, evitando así errores.
sumaTempMax = sum(df1$Max.TemperatureC, na.rm = TRUE)
tempMedia = round(sumaTempMax / length(df1$Max.TemperatureC), digits = 1)
class(df1$fecha)
library(lubridate)
df1$anio = year(df1$fecha) # sacamos el año
df1$mes = month(df1$fecha) # saca el mes
df1$dia <- day(df1$fecha) # saca el día
plot(df1$anio, df1$Max.TemperatureC, main = "Temperaturas Máximas años 1997-2015 ", xlab = "Años", ylab = "Temperatura (Cº)")
plot(df1$mes, df1$Max.TemperatureC, main = "Temperaturas Máximas a lo largo del Año (12 meses), ", xlab = "Meses", ylab = "Temperatura (Cº)")
plot(df1$dia, df1$Max.TemperatureC, main = "Temperaturas Máximas a lo largo de los días del mes", xlab = "Meses", ylab = "Temperatura (Cº)")
df1$dsemana = wday(df1$fecha,week_start = 1) # Esto hace que el día de la semana empiece en 1 = Lunes
df1$finDeSemana[df1$dsemana == 6 | df1$dsemana == 7] = "Si"
df1$finDeSemana[df1$dsemana == 1 | df1$dsemana == 2 | df1$dsemana == 3 | df1$dsemana == 4 | df1$dsemana == 5] = "No"
class(df1$finDeSemana)
df1$finDeSemana = as.factor(df1$finDeSemana)
class(df1$finDeSemana)
plot(df1$finDeSemana, df1$Max.TemperatureC, main = "Temperaturas Máximas en función del día de la semana, ", xlab = "días de la semana", ylab = "Temperatura (Cº)")
# Al hacer na.rm nos aseguramos de que los valores faltantes (NA) se omitan en el cálculo, evitando así errores.
sumaTempMax = sum(df1$Max.TemperatureC, na.rm = TRUE)
tempMedia = round(sumaTempMax / length(df1$Max.TemperatureC), digits = 1)
