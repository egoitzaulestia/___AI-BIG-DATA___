# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "j"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char_upper == "Y") {
print(paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
print(paste0("La letra '", char, "' es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char_upper == "Y") {
print(paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
print(paste0("La letra '", char, "' es una consonante"))
}
char <- "y"
char <- "y"
char <- toupper(char)
if(char == "A" | char == "E" | char == "I" | char == "O" | char == "U"){
print("La letra es una vocal.")
} else if (char == "Y") {
print("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print("La letra '", char, "' es una consonante")
}
char <- "y"
char <- toupper(char)
if(char == "A" | char == "E" | char == "I" | char == "O" | char == "U"){
print("La letra es una vocal.")
} else if (char == "Y") {
print("La letra 'y' puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print("La letra es una consonante")
}
# Versión freak para imprimir las dobles comillas (con "print" simpre me imprime los "backslash" :/ )
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(paste0("La letra \"", char, "\" es una vocal."))
} else if (char_upper == "Y") {
cat(paste0("La letra \"", char, "\" puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
notas_uni <- factor(c("NT", "AP", "SB", "SB", "MH", "SB"), levels = c("SS", "AP", "NT", "SB", "MH"))
notas_uni
notas
nlevels(notas)
nlevels(notas_uni)
notas_uni <- factor(c("NT", "AP", "SB", "SB", "MH", "SB"), levels = c("SS", "AP", "NT", "SB", "MH"))
notas_uni
nlevels(notas_uni)
levels(notas_uni)
levels(notas_uni)[3]
levels(notas_uni)[3] <- "Notable"
levels(notas_uni)[3]
5**2
5**5
3**2
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(1, 1, -6)
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(4, 1, -6)
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(5, 2, -6)
1
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(1, 1, -6)
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante // Δ = b2 − 4ac
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(1, 1, -6)
setwd("~/01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-intro-R/03-Analisis-Preliminar/ejercicios")
rm(list=ls())
datos <- read.csv("trainmod.csv",header = TRUE,sep = ",",stringsAsFactors = TRUE)
show(datos)
summary(datos)
levels(datos$Crisis)
datos$Crisis = as.character(datos$Crisis)
datos$Crisis[datos$Crisis == "Si"] = "Crisis"
datos$Crisis[datos$Crisis == "No"] = "Burbuja"
datos$Crisis = as.factor((datos$Crisis))
sapply(datos, class)
View(datos)
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia", col= "blue")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$SalePrice,main = "Distribucion de los eventos", xlab = NULL, ylab = "Frecuencia de Ventas", col= "red")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$SalePrice,main = "Distribucion de los eventos", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "red")
# Realizamos un histograma del precio de venta.
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$SalePrice,main = "Distribucion de los eventos", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "red")
# Realizamos un grafico de puntos de la temperatura maxima.
plot(datos$SalePrice)
setwd("~/01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-intro-R/03-Analisis-Preliminar/teoria")
rm(list=ls())
datos <- read.csv("Ejemplo_4.csv",header = TRUE,sep = ";",stringsAsFactors = TRUE)
show(datos)
summary(datos)
# Analizamos los niveles que existen.
levels(datos$Events)
# Lo cambiamos por "No_evento".
levels(datos$Events)[1] <- "No_evento"
# Analizamos los eventos existentes.
table(datos$Events)
sapply(datos, class)
# Observamos que la fecha aparece como factor.
# Esto debe ser corregido.
x = factor(c("20","80","1","4"))
x1 = as.numeric(x)
x2 = as.numeric(as.character(x))
datos$CET <- as.POSIXct(as.character(datos$CET), format="%d/%m/%Y")
# Comprobamos que se ha cambiado.
sapply(datos, class)
library(ggplot2)
# Analizamos como se distribuye la temperatura maxima.
ggplot(datos,aes(x=Max.TemperatureC))+geom_bar()
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$Events,datos$Max.TemperatureC,las=2,cex.axis=0.5)
# cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5
# O como se relacionan la temperatura maxima y la minima.
plot(datos$Max.TemperatureC,datos$Min.TemperatureC)
# O realizar un histograma de la temperatura maxima.
hist(datos$Max.TemperatureC,main = "Distribucion de la temperatura", xlab = "Temperatura", ylab = "Frecuencia", col= "blue")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$Events,main = "Distribucion de los eventos", xlab = NULL, ylab = "Frecuencia", col= "red")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$SalePrice,main = "Distribucion de los eventos", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "red")
setwd("~/01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-intro-R/03-Analisis-Preliminar/ejercicios")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$SalePrice,main = "Distribucion de los eventos", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "red")
setwd("~/01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-intro-R/03-Analisis-Preliminar/ejercicios")
# Realizamos un histograma del precio de venta.
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
rm(list=ls())
datos <- read.csv("trainmod.csv",header = TRUE,sep = ",",stringsAsFactors = TRUE)
show(datos)
summary(datos)
levels(datos$Crisis)
datos$Crisis = as.character(datos$Crisis)
datos$Crisis[datos$Crisis == "Si"] = "Crisis"
datos$Crisis[datos$Crisis == "No"] = "Burbuja"
datos$Crisis = as.factor((datos$Crisis))
sapply(datos, class)
# Realizamos un histograma del precio de venta.
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
# Mostramos un grafico de barras de los eventos cliamtologicos.
plot(datos$SalePrice,main = "Distribucion de los eventos", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "red")
# Realizamos un grafico de puntos de la SalePrice.
plot(datos$SalePrice)
boxplot(datos$SalePrice, main="Gráfico de Caja del Precio de Venta", ylab="Precio de Venta", col="lightblue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área del Lote vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
boxplot(datos$SalePrice, main="Gráfico de Caja del Precio de Venta", ylab="Precio de Venta", col="lightblue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área del Terreno vs Precio de Venta", xlab="Área del Terreno", ylab="Precio de Venta", col="blue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área del Lote vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área del Lote vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# 8. Realizar un histograma del precio de venta.
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
a, datos$SalePrice, main="Gráfico de Dispersión: Área del Lote vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área del Lote vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# Creamos un scatter plot, gráfico de dispersión comparando el área de la superficie grafico de de punto de nubes
plot(datos$SalePrice, datos$LotArea, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
datos$SalePrice
# Creamos un scatter plot, gráfico de dispersión comparando el  grafico de de punto de nubes
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área del Lote vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# 8. Realizar un histograma del precio de venta.
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
# Creamos un scatter plot, gráfico de dispersión comparando el área de la superficie de las casas con el precio de venta.
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta, xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# Creamos un scatter plot, gráfico de dispersión comparando el área de la superficie de las casas con el precio de venta.
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# 8. Realizar un histograma del precio de venta.
hist(datos$SalePrice,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
plot(datos$YrSold, datos$SalePrice, type="l", main="Evolución del Precio de Venta por Año", xlab="Año de Venta", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$SalePrice,datos$MSZoning,las=2,cex.axis=0.5)
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$SalePrice,datos$MSZoning,las=2,cex.axis=0.5)
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$SalePrice,datos$MSZoning,las=2,cex.axis=0.5)
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$MSZoning,datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", las=2,cex.axis=0.5)
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$MSZoning,datos$SalePrice, main="Boxplots: Zonificación vs Precio de Venta", las=2,cex.axis=0.5)
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$MSZoning,datos$SalePrice, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
plot(datos$SalePrice,datos$MSZoning, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$MSZoning,datos$SalePrice, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
plot(datos$SalePrice,datos$MSZoning, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$MSZoning,datos$SalePrice, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
plot(datos$SalePrice,datos$MSZoning, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
# Scatter Plot de
plot(datos$SalePrice,as.character(datos$MSZoning), main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
plot(datos$SalePrice, as.character(datos$MSZoning), main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2, cex.axis=0.5)
# Tambien podemos analizar la temperatura max en funcion de los eventos.
plot(datos$MSZoning,datos$SalePrice, main="Boxplots: Zonificación vs Precio de Venta", xlab="Zonificación", ylab="Precio de Venta", las=2,cex.axis=0.5)
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$LotArea, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$GrLivArea, datos$SalePrice, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$GrLivArea, datos$SalePrice, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$GrLivArea, datos$SalePrice, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$GrLivArea, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$GrLivArea, datos$SalePrice, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$GrLivArea, datos$SalePrice, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$LotArea, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$GrLivArea, datos$SalePrice, main="Gráfico de Dispersión: Área Habitable vs Precio de Venta", xlab="Área Habitable (GrLivArea)", ylab="Precio de Venta", col="blue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote (LotArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área de la Superficie (LotArea)", ylab="Precio de Venta", col="blue")
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
# Scatter Plot (gráfico de nubes) del precio de venta y “LotArea”:
# En este caso vemos ouliers muy exagerados en
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área del Lote", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área de la Superficie (LotArea)", ylab="Precio de Venta", col="blue")
# Scatter Plot (gráfico de nubes) del precio de venta y “LotArea”:
# En este caso vemos ouliers muy exagerados en
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área de la Superficie (LotArea)", ylab="Precio de Venta", col="blue")
# Scatter Plot (gráfico de nubes) del precio de venta y “LotArea”:
# En este caso, vemos outliers muy exagerados en el área de la superficie (LotArea),
# los cuales distorsionan la interpretación general del gráfico, al forzar una escala más amplia
# que dificulta observar la tendencia central de los datos.
plot(datos$LotArea, datos$SalePrice, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área de la Superficie (LotArea)", ylab="Precio de Venta", col="blue")
plot(datos$SalePrice, datos$MSZoning, main="Gráfico de Dispersión: Área de la Superficie vs Precio de Venta", xlab="Área de la Superficie (LotArea)", ylab="Precio de Venta", col="blue")
# 11. Realizar un gráfico de la variable “MSZoning”.
boxplot(datos$MSZoning, main="Gráfico de Caja del Precio de Venta", ylab="Precio de Venta", col="lightblue")
hist(datos$MSZoning,main = "Distribucion del Precio de Venta", xlab = "Precio de Venta", ylab = "Frecuencia de Ventas", col= "blue")
barplot(datos$MSZoning, main="Distribución de la Zonificación (MSZoning)", xlab="Zonificación", ylab="Frecuencia", col="lightblue")
zonas <- table(datos$MSZoning)
barplot(zonas, main="Distribución de la Zonificación (MSZoning)", xlab="Zonificación", ylab="Frecuencia", col="lightblue")
table(datos$MSZoning)
# Realizamos el gráfico de barras para visualizar cuántos datos pertenecen a cada categoría de zonificación
barplot(zonas, main="Distribución de la Zonificación (MSZoning)", xlab="Zonificación", ylab="Frecuencia", col="blue")
# Ejecutamos el gráfico de caja boxplot
boxplot(datos$SalePrice, main="Gráfico de Caja del Precio de Venta", ylab="Precio de Venta", col="blue")
lightblue
# Ejecutamos el gráfico de caja boxplot
boxplot(datos$SalePrice, main="Gráfico de Caja del Precio de Venta", ylab="Precio de Venta", col="lightblue")
blue
# Ejecutamos el gráfico de caja boxplot
boxplot(datos$SalePrice, main="Gráfico de Caja del Precio de Venta", ylab="Precio de Venta", col="blue")
# Realizamos el gráfico de barras para visualizar cuántos datos pertenecen a cada categoría de zonificación
barplot(zonas, main="Distribución de la Zonificación (MSZoning)", xlab="Zonificación", ylab="Frecuencia", col="blue")
# 12. Seleccionar los datos numéricos.
datosNum = datos[,sapply(datos,is.numeric)]
View(datosNum)
# Con este grafico visualizamos la relacion entre las variables y su correlacion.
library(PerformanceAnalytics)
chart.Correlation(datosNum,hist=T)
datosNum10UltimasVariables = datosNum[,:-10]
datosNum10UltimasVariables = datosNum[,30:39]
View(datosNum10UltimasVariables)
# Otra opcion es realizar el siguiente grafico.
library(psych)
pairs.panels(datosNum)
# Otra opcion es realizar el siguiente grafico.
library(psych)
pairs.panels(datosNum)
# 15. Analizar la relación de estas variables con dos gráficos diferentes.
chart.Correlation((datosNum10UltimasVariables, hist=T)
# 15. Analizar la relación de estas variables con dos gráficos diferentes.
chart.Correlation(datosNum10UltimasVariables, hist=T)
# Generar una matriz de dispersión
pairs(datosNum10UltimasVariables, main="Matriz de Dispersión de las Variables Numéricas")
# 15. Analizar la relación de estas variables con dos gráficos diferentes.
chart.Correlation(datosNum10UltimasVariables, hist=T)
# Generar una matriz de dispersión
pairs(datosNum10UltimasVariables, main="Matriz de Dispersión de las Variables Numéricas")
# 15. Analizar la relación de estas variables con dos gráficos diferentes.
chart.Correlation(datosNum10UltimasVariables, hist=T)
# Seleccionar solo las columnas numéricas
numericas <- datos[, sapply(datos, is.numeric)]
# Calcular la matriz de correlación
correlacion <- cor(numericas, use="complete.obs")
# Generar un heatmap de la matriz de correlación
heatmap(correlacion, main="Heatmap de Correlación entre Variables Numéricas", col=colorRampPalette(c("blue", "white", "red"))(20), symm=TRUE)
# Calcular la matriz de correlación
correlacion <- cor(datosNum10UltimasVariables, use="complete.obs")
# Generar un heatmap de la matriz de correlación
heatmap(correlacion, main="Heatmap de Correlación entre Variables Numéricas", col=colorRampPalette(c("blue", "white", "red"))(20), symm=TRUE)
# c) Heatmap (mapa de calor)
# Calculamos la matriz de correlación
correlacion10UltVar = cor(datosNum10UltimasVariables, use="complete.obs")
# Generar un heatmap de la matriz de correlación
heatmap(correlacion10UltVar, main="Heatmap de Correlación entre Variables Numéricas", col=colorRampPalette(c("blue", "white", "red"))(20), symm=TRUE)
correlaciones = cor(datosNum)
library(corrplot)
corrplot(cor(datosNum), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
datosNumSinNA = datosNum[complete.cases(datosNum),]
View(datosNumSinNA)
any(is.na(datosNum))
sum(is.na(datos))
sum(datos)
sum(is.na(datos))
colSums(is.na(datos))
# Sema de todo
sum(is.na(datos))
# Sema de todo
sum(is.na(datosNum))
sum(datosNum)
dim(datosNum)
# Sema de todos los NAs numéricos
sum(is.na(datosNum))
total_valores <- nrow(datos) * ncol(datos)
total_valores
total_valores <- nrow(datosNum) * ncol(datosNum)
total_valores
# Para saber de cuantos datos disponemos
total_valores = nrow(datosNum) * ncol(datosNum)
total_valores
# Para saber de cuantos datos disponemos
totalValoresNum = nrow(datosNum) * ncol(datosNum)
totalValoresNum
# Sema de todos los NAs numéricos
sum(is.na(datosNum))
# Procedemos a eliminar todos los NAs
datosNumSinNA = datosNum[complete.cases(datosNum),]
# Procedemos a eliminar todos los NAs
datosNumSinNA = datosNum[complete.cases(datosNum),]
View(datosNumSinNA)
any(is.na(datosNumSinNA))
# a)
correlaciones = cor(datosNum)
library(corrplot)
corrplot(cor(datosNum), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
# a)
corrplot(cor(datosNum), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
# Agregar el título a la gráfica
title(main = "Matriz de Correlación")
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
# Agregamos el título a la gráfica
title(main = "Matriz de Correlación")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
# Agregamos el título a la gráfica
mtext("Matriz de Correlación", side=3, line=2, cex=1.5)
# Agregamos el título a la gráfica
title(main = "Matriz de Correlación")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
corrplot(cor(datosNum), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
# Agregamos el título a la gráfica
title(main = "Matriz de Correlación")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
# a)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n")
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.6)
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n",tl.cex = 0.8)
# g) Gráficos de tarta (pie) para mostrar la correlación, con diagonal.
corrplot(cor(datosNumSinNA), method="pie", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# f) Colores para mostrar la correlación, con diagonal.
corrplot(cor(datosNumSinNA), method="color", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# e) Números para mostrar la correlación, con diagonal.
corrplot(cor(datosNumSinNA), method="number", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# a) Sombreado con etiquetas más pequeñas.
corrplot(cor(datosNumSinNA), method="shade", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=FALSE, cl.pos="n", tl.cex=0.6)
# b) Círculos para mostrar la correlación, incluyendo diagonal.
corrplot(cor(datosNumSinNA), method="circle", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# c) Cuadrados para representar la correlación, con diagonal.
corrplot(cor(datosNumSinNA), method="square", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# d) Elipses para mostrar correlación, incluyendo diagonal.
corrplot(cor(datosNumSinNA), method="ellipse", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# e) Números para mostrar la correlación, con diagonal.
corrplot(cor(datosNumSinNA), method="number", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
# f) Colores para mostrar la correlación, con diagonal.
corrplot(cor(datosNumSinNA), method="color", shade.col=NA, tl.col="black",
tl.srt=45, addgrid.col="black", type="lower", diag=TRUE, cl.pos="n", tl.cex=0.6)
sapply(datos, class)
# 19. Guardar los datos.
write.csv(datos, "trainmod.csv", row.names=FALSE)
