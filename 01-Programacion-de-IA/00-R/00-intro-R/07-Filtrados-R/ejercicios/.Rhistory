}
Perimeter_Of_A_Circle_By_Diameter(5)
Area_Circle = function(r) {
round(pi*(r^2), 2) # Utilizamos la constante predefinida "pi" como pi = 3.1416...
}
Area_Circle(3)
area_circle = function(r) {
round(pi*(r^2), 2) # Utilizamos la constante predefinida "pi" como pi = 3.1416...
}
area_circle(3)
area_circle = function(r) {
round(pi*(r^2), 2) # Utilizamos la constante predefinida "pi" como pi = 3.1416...
}
area_circle(3)
area_rectangle = function(x, y) {x*y}
area_rectangle(2, 4)
# Hay dos maneraas de calcular el perimetro de un círculo:
# Opción 1, usando el diámetro (d): C = πd
perimeter_circle_diameter = function(d) {
round(pi*d, 2)
}
perimeter_circle_diameter(5)
# Opción 2, usando el radio (r): C = 2πr --> r = radio
perimeter_circle_radio = function(r) {
round(2*pi*r, 2)
}
perimeter_circle_radio(8)
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste("La letra", char, "es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste("La letra", char, "es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste('La letra"', char, '"es una vocal.'))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste('La letra"', char, '"es una consonante'))
}
print(paste0('La letra"', char, '"es una vocal.'))
print(paste('La letra"', char, '"es una vocal.'))
"
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste("La letra", char, "es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste("La letra", char, "es una consonante"))
}
print(paste("La letra''", char, "es una consonante"))
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste("La letra", char, "es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste("La letra", char, "es una consonante"))
}
print(paste("La letra", char, "es una consonante"))
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste("La letra", char, "es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste("La letra", char, "es una consonante"))
}
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
print(paste("La letra'", char, "es una vocal."))
print(paste0("La letra '", char, "es una vocal."))
print(paste0("La letra '", char, "' es una vocal."))
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste("La letra", char, "es una consonante"))
}
print(paste0("La letra ''", char, "' es una vocal."))
print(paste0("La letra ''", char, "'' es una vocal."))
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste("La letra", char, "es una consonante"))
}
x <- paste0("//*[@id=",'"set_',1,'_div"]/a')
x
cat(x)
x
# use the escape character
example1 = "This is \"R\" programming"
example1
# use of cat() to omit backslash
cat(example1)
print(cat(paste("La letra \"", char, "\" es una vocal.")))
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(cat(paste("La letra\"", char, "\"es una vocal.")))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(cat(paste("La letra\"", char, "\"es una consonante")))
}
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(cat(paste("La letra \"", char, "\" es una vocal.")))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(cat(paste("La letra\"", char, "\"es una consonante")))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "L"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(cat(paste0("La letra \"", char, "\" es una vocal.")))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(cat(paste0("La letra\"", char, "\"es una consonante")))
}
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(cat(paste0("La letra \"", char, "\" es una vocal.")))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(cat(paste0("La letra \"", char, "\" es una consonante")))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "o"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(cat(paste0("La letra \"", char, "\" es una vocal.")))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(cat(paste0("La letra \"", char, "\" es una consonante")))
}
char <- "o"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(paste0("La letra \"", char, "\" es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(paste0("La letra \"", char, "\" es una vocal."))
} else if (char_upper == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
char <- "a"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(print(paste0("La letra \"", char, "\" es una vocal.")))
} else if (char_upper == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
char <- "o"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(paste0("La letra \"", char, "\" es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "o"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra ", char, " es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste0("La letra ", char, " es una consonante"))
}
resultado <- cat("Hola mundo")
resultado
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "o"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra ", char, " es una vocal."))
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste0("La letra ", char, " es una consonante"))
}
char <- "o"
char_upper <- toupper(char)
resultado <- if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
paste0("La letra ", char, " es una vocal.")
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
paste0("La letra ", char, " es una consonante")
}
print("Resultado:", resultado)
print(paste("Resultado:", resultado))
char <- "o"
char_upper <- toupper(char)
resultado <- if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
paste0("La letra -", char, "- es una vocal.")
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
paste0("La letra ", char, " es una consonante")
}
print(paste("Resultado:", resultado))
char_upper <- toupper(char)
resultado <- if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
paste0("La letra ", char, " es una vocal.")
} else if (char == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
paste0("La letra ", char, " es una consonante")
}
print(paste("Resultado:", resultado))
char <- "y"
char_upper <- toupper(char)
resultado <- if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
paste0("La letra ", char, " es una vocal.")
} else if (char_upper == "Y") {
paste0("La letra ", char, " puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
paste0("La letra ", char, " es una consonante")
}
print(paste("Resultado:", resultado))
char <- "y"
char_upper <- toupper(char)
resultado <- if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
paste0("La letra ", char, " es una vocal.")
} else if (char_upper == "Y") {
paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
paste0("La letra '", char, "' es una consonante")
}
print(paste("Resultado:", resultado))
char <- "a"
char_upper <- toupper(char)
resultado <- if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
paste0("La letra '", char, "' es una vocal.")
} else if (char_upper == "Y") {
paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
paste0("La letra '", char, "' es una consonante")
}
print(paste("Resultado:", resultado))
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(paste0("La letra \"", char, "\" es una vocal."))
} else if (char == "Y") {
cat(paste0("La letra \"", char, "\" puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "o"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra ", char, " es una vocal."))
} else if (char_upper == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste0("La letra ", char, " es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra ", char, " es una vocal."))
} else if (char_upper == "Y") {
print("La letra Y puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print(paste0("La letra ", char, " es una consonante"))
}
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra ", char, " es una vocal."))
} else if (char_upper == "Y") {
print(paste0("La letra ", char, " puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
print(paste0("La letra ", char, " es una consonante"))
}
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char_upper == "Y") {
print(paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
print(paste0("La letra '", char, "' es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "j"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char_upper == "Y") {
print(paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
print(paste0("La letra '", char, "' es una consonante"))
}
# 10- Crear una condicion que determine si una letra es vocal o consonante o si se trata de la Y griega.
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
print(paste0("La letra '", char, "' es una vocal."))
} else if (char_upper == "Y") {
print(paste0("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
print(paste0("La letra '", char, "' es una consonante"))
}
char <- "y"
char <- "y"
char <- toupper(char)
if(char == "A" | char == "E" | char == "I" | char == "O" | char == "U"){
print("La letra es una vocal.")
} else if (char == "Y") {
print("La letra '", char, "' puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print("La letra '", char, "' es una consonante")
}
char <- "y"
char <- toupper(char)
if(char == "A" | char == "E" | char == "I" | char == "O" | char == "U"){
print("La letra es una vocal.")
} else if (char == "Y") {
print("La letra 'y' puede ser una vocal o una consonante según su uso en la palabra que la contiene.")
} else{
print("La letra es una consonante")
}
# Versión freak para imprimir las dobles comillas (con "print" simpre me imprime los "backslash" :/ )
char <- "y"
char_upper <- toupper(char)
if(char_upper == "A" | char_upper == "E" | char_upper == "I" | char_upper == "O" | char_upper == "U"){
cat(paste0("La letra \"", char, "\" es una vocal."))
} else if (char_upper == "Y") {
cat(paste0("La letra \"", char, "\" puede ser una vocal o una consonante según su uso en la palabra que la contiene."))
} else{
cat(paste0("La letra \"", char, "\" es una consonante"))
}
notas_uni <- factor(c("NT", "AP", "SB", "SB", "MH", "SB"), levels = c("SS", "AP", "NT", "SB", "MH"))
notas_uni
notas
nlevels(notas)
nlevels(notas_uni)
notas_uni <- factor(c("NT", "AP", "SB", "SB", "MH", "SB"), levels = c("SS", "AP", "NT", "SB", "MH"))
notas_uni
nlevels(notas_uni)
levels(notas_uni)
levels(notas_uni)[3]
levels(notas_uni)[3] <- "Notable"
levels(notas_uni)[3]
5**2
5**5
3**2
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(1, 1, -6)
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(4, 1, -6)
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(5, 2, -6)
1
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Probar la función con los valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(1, 1, -6)
resolver_ecuacion_cuadratica = function(a, b, c) {
# Calculamos el discriminante // Δ = b2 − 4ac
discriminante = b^2 - 4 * a * c
# Verificamos si el discriminante es negativo
if (discriminante < 0) {
return("No hay soluciones reales")
} else if (discriminante == 0) {
# Si el discriminante es 0, hay una solución única
x = -b / (2 * a)
return(x)
} else {
# Si el discriminante es positivo, hay dos soluciones
x1 = (-b + sqrt(discriminante)) / (2 * a)
x2 = (-b - sqrt(discriminante)) / (2 * a)
return(c(x1, x2)) # Devolver las dos soluciones
}
}
# Valores de la ecuación x^2 + x - 6 = 0
resolver_ecuacion_cuadratica(1, 1, -6)
setwd("~/01_CODE/___AI-BIG-DATA___/01-Programacion-de-IA/00-intro-R/07-Filtrados-R/ejercicios")
rm(list=ls())
df <- read.csv("trainmod.csv",header = TRUE,sep = ",", stringsAsFactors = T)
levels(df$MSZoning)
MSZoning_RM = df[df$MSZoning == "RM",]
MSZoning_RM_o_C = df[df$MSZoning=="RM" | df$MSZoning=="C",]
# Otra opción de filtrado
RM_o_C = df$MSZoning=="RM" | df$MSZoning=="C"
MSZoning_RM_o_C2 = df[RM_o_C,]
precio_menor_cienMil = df[df$SalePrice < 100000,]
precio_menor_cienMil_o_MSZZoning_RM = df[df$SalePrice < 100000 | df$MSZoning=="RM" ,]
precio_menor_cienMil_y_MSZZoning_RM = df[df$SalePrice < 100000 & df$MSZoning=="RM" ,]
MSZoning_RL = df[df$MSZoning !="RL",]
MSZoning_RL = df[df$MSZoning !="RL" & df$SalePrice < 120000,]
sapply(df,class)
# Seleccionamos los factores.
Factores = df[ ,sapply(df,is.factor), drop = FALSE] # drop igual a FALSE nos mantiene SIEMPRE en DataFrame
criterio = apply(df,2, function(x) length(unique(na.omit(x))) > 1)
seleccion = df[,criterio]
rep = duplicated(Factores, incomparables = FALSE)
# rep = as.data.frame(rep)
table(rep)
datosNuevos = Factores[!rep,]
df1 <- read.csv("datosImp.csv",header = TRUE,sep = ",", stringsAsFactors = T)
filtrado_datosImp = df[colnames(df) %in% colnames(df1),  drop = FALSE]
df2 <- read.csv("CasasCaras.csv",header = TRUE,sep = ",", stringsAsFactors = T)
filtrado_casas_caras = df[df$Id %in% df2$Id, ,  drop = FALSE]
filtrado_datosImp = df[colnames(df) %in% colnames(df1),  drop = FALSE]
filtrado_casas_caras = df[df$Id %in% df2$Id, ,  drop = FALSE]
filtrado_datosImp = df[colnames(df) %in% colnames(df1), drop = FALSE]
filtrado_casas_caras = df[df$Id %in% df2$Id, ]
filtrado_datosImp = df[colnames(df) %in% colnames(df1)]
