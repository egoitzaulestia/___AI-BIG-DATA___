v1 = c(1, 0)
v2 = c(0, 1)
# Calcular el producto escalar para verificar ortogonalidad
producto_escalar = sum(v1 * v2)
print(paste("Producto escalar de v1 y v2:", producto_escalar))
# Verificar si el producto escalar es cero (ortogonalidad)
if (producto_escalar == 0) {
print("Los vectores son ortogonales.")
} else {
print("Los vectores no son ortogonales.")
}
# Calcular la norma de cada vector
norma_v1 = Norm(v1)
norma_v2 = Norm(v2)
# Mostrar las normas
print(paste("Norma de v1:", norma_v1))
print(paste("Norma de v2:", norma_v2))
# Verificar si ambas normas son 1 (norma unitaria)
if (norma_v1 == 1 && norma_v2 == 1) {
print("Ambos vectores tienen norma unitaria.")
} else {
print("Los vectores no tienen norma unitaria.")
}
# Confirmación de que el conjunto es una base ortonormal en R^2
print("El conjunto de vectores forma una base ortonormal en R^2.")
A = matrix(c(0, 1, 2, 1, 1, 1), nrow = 3, byrow = TRUE)
B = matrix(c(0, 2, 5), nrow = 3, byrow = TRUE)
A = matrix(c(0, 1, 2, 1, 1, 1), nrow = 3, byrow = TRUE)
B = matrix(c(0, 2, 5), nrow = 3, byrow = TRUE)
B
#2.paso: tipo de sistema (incompatible/compatible) con el Teorema de R-F
# Calcular el rango de la matriz usando la descomposición QR
rango = qr(A)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz A es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(A)
num_columnas = ncol(A)
# Resultados
if (rango == num_filas) {
cat("La matriz A es de rango pleno por filas.\n")
} else {
cat("La matriz A no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz A es de rango pleno por columnas.\n")
} else {
cat("La matriz A no es de rango pleno por columnas.\n")
}
cat("Al ser matriz de rango plena por columnas significa que existe una invers lateral de A.")
# 3. Calcular la pseudo-inversa de A para resolver el sistema de mínimos cuadrados
# pseudo-inversa de A = (A' * A)^-1 * A'
A_inv_izquierda = solve(t(A) %*% A) %*% t(A)
# 4. Resolver el sistema utilizando la pseudo-inversa
X = A_inv_izquierda %*% B
cat("La solución es: a =", X[1], ", b =", X[2], "\n")
# 5. Graficar los puntos y la recta obtenida
# Instalamos y cargamos ggplot2 solo si aún no está instalado
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
# Crear un data frame para los puntos
datos = data.frame(x = c(0, 1, 2), y = c(0, 2, 5))
# Graficar los puntos y la recta de ajuste
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = X[1], intercept = X[2], color = "blue") +
labs(title = "Ajuste de mínimos cuadrados", x = "X", y = "Y") +
theme_minimal()
rm(list=ls())
setwd("E:/Algebra DVM/AlgebraLineal/8.RegresiónPolinómica")
#cargar datos
dataset = read.csv("Position_Salaries.csv")
#Viendo el conjunto de datos nos quedaremos solo con level y salary
#porque la primera columna es 'igual' que la de level
dataset = dataset[,2:3]
# 1. Modelo de Regresión Lineal
datos_lineal = dataset
modelo_lineal = lm(formula = Salary ~ ., data = datos_lineal)
summary(modelo_lineal)
rm(list=ls())
setwd("E:/Algebra DVM/AlgebraLineal/8.RegresiónPolinómica")
#cargar datos
dataset = read.csv("Position_Salaries.csv")
#Viendo el conjunto de datos nos quedaremos solo con level y salary
#porque la primera columna es 'igual' que la de level
dataset = dataset[,2:3]
# 1. Modelo de Regresión Lineal
datos_lineal = dataset
modelo_lineal = lm(formula = Salary ~ ., data = datos_lineal)
setwd("~/01_CODE/___AI-BIG-DATA___/02-Sistemas-de-Big-Data/02-Algebra/08-regresion-polinomica")
rm(list=ls())
setwd("E:/Algebra DVM/AlgebraLineal/8.RegresiónPolinómica")
#cargar datos
dataset = read.csv("Position_Salaries.csv")
#Viendo el conjunto de datos nos quedaremos solo con level y salary
#porque la primera columna es 'igual' que la de level
dataset = dataset[,2:3]
# 1. Modelo de Regresión Lineal
datos_lineal = dataset
modelo_lineal = lm(formula = Salary ~ ., data = datos_lineal)
# 1. Modelo de Regresión Lineal
datos_lineal = dataset
modelo_lineal = lm(formula = Salary ~ ., data = datos_lineal)
summary(modelo_lineal)
# VISUALIZACIÓN: DATOS Y MODELO LINEAL
library(ggplot2)
ggplot()+
geom_point(aes(x = datos_lineal$Level ,y = datos_lineal$Salary),
color = "red") +
geom_line(aes(x = datos_lineal$Level,y = predict(modelo_lineal, newdata = datos_lineal)),
color = "blue") +
ggtitle("Predicción del sueldo según el modelo lineal") +
xlab("Nivel del empleado") + ylab("Sueldo (en $)")
datos_poli = dataset
datos_poli$Level2 = datos_poli$Level^2  #columna con valores de Level elevados al cuadrado
datos_poli$Level3 = datos_poli$Level^3  #columna al cubo
View(datos_poli)
modelo_poli = lm(formula = Salary ~ ., data = datos_poli)
summary(modelo_poli)
# VISUALIZACIÓN: DATOS Y MODELO POLINÓMICO
ggplot()+
geom_point(aes(x = datos_poli$Level ,y = datos_poli$Salary),
color = "red") +
geom_line(aes(x = datos_poli$Level,y = predict(modelo_poli, newdata = datos_poli)),
color = "blue") +
ggtitle("Predicción del sueldo según el modelo polinómico") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
datos_poli_4 = dataset
datos_poli_4$Level2 = datos_poli_4$Level^2
datos_poli_4$Level3 = datos_poli_4$Level^3
datos_poli_4$Level4 = datos_poli_4$Level^4
View(datos_poli_4)
modelo_poli4 = lm(formula = Salary ~ ., data = datos_poli_4)
summary(modelo_poli4)
x_grid = seq(min(datos_poli_4$Level),max(datos_poli_4$Level),0.1)
ggplot()+
geom_point(aes(x = datos_poli_4$Level, y = datos_poli_4$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(modelo_poli4, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("Predicción del sueldo según el modelo polinómico") +
xlab("Nivel del empleado") + ylab("Sueldo (en $)")
datos_poli_4 = dataset
datos_poli_4$Level4 = datos_poli_4$Level^4
modelo_poli4 = lm(formula = Salary ~ ., data = datos_poli_4)
summary(modelo_poli4)
x_grid = seq(min(datos_poli_4$Level),max(datos_poli_4$Level),0.1)
ggplot()+
geom_point(aes(x = datos_poli_4$Level, y = datos_poli_4$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(modelo_poli4, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("Predicción del sueldo según el modelo polinómico") +
xlab("Nivel del empleado") + ylab("Sueldo (en $)")
datos_poli_4 = dataset
datos_poli_4$Level2 = datos_poli_4$Level^2
datos_poli_4$Level3 = datos_poli_4$Level^3
datos_poli_4$Level4 = datos_poli_4$Level^4
modelo_poli4 = lm(formula = Salary ~ ., data = datos_poli_4)
summary(modelo_poli4)
x_grid = seq(min(datos_poli_4$Level),max(datos_poli_4$Level),0.1)
ggplot()+
geom_point(aes(x = datos_poli_4$Level, y = datos_poli_4$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(modelo_poli4, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = "blue") +
ggtitle("Predicción del sueldo según el modelo polinómico") +
xlab("Nivel del empleado") + ylab("Sueldo (en $)")
View(dataset)
rm(list = ls())
# Cargar la librería Matrix
library(Matrix)
#####################
# Definir la matriz A
A = matrix(c(1, 2, 0), nrow = 1, ncol = 3)
# Calcular el rango de la matriz usando la descomposición QR
rango = qr(A)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz A es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(A)
num_columnas = ncol(A)
# Resultados
if (rango == num_filas) {
cat("La matriz A es de rango pleno por filas.\n")
} else {
cat("La matriz A no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz A es de rango pleno por columnas.\n")
} else {
cat("La matriz A no es de rango pleno por columnas.\n")
}
#####################
# Definir la matriz B
B = matrix(c(2, 1, 5, -1, 1, 3), nrow = 2, ncol = 3)
# Calcular el rango de la matriz
rango = qr(B)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz B es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(B)
num_columnas = ncol(B)
# Resultados
if (rango == num_filas) {
cat("La matriz B es de rango pleno por filas.\n")
} else {
cat("La matriz B no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz B es de rango pleno por columnas.\n")
} else {
cat("La matriz B no es de rango pleno por columnas.\n")
}
#####################
# Definir la matriz C
C = matrix(c(1, 0, -1, 1, 2, 0, 1, 1), nrow = 4, ncol = 2)
# Calcular el rango de la matriz
rango = qr(C)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz C es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(C)
num_columnas = ncol(C)
# Resultados
if (rango == num_filas) {
cat("La matriz B es de rango pleno por filas.\n")
} else {
cat("La matriz B no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz B es de rango pleno por columnas.\n")
} else {
cat("La matriz B no es de rango pleno por columnas.\n")
}
#####################
# Definir la matriz D
D = matrix(c(1, 2, 5, -1, 4, 0), nrow = 2, ncol = 4)
# Calcular el rango de la matriz
rango = qr(D)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz D es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(D)
num_columnas = ncol(D)
# Resultados
if (rango == num_filas) {
cat("La matriz B es de rango pleno por filas.\n")
} else {
cat("La matriz B no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz B es de rango pleno por columnas.\n")
} else {
cat("La matriz B no es de rango pleno por columnas.\n")
}
rm(list = ls())
# Definir la matriz A
A = matrix(c(1, 2, 5, -1, 4, 0), nrow = 2, byrow = TRUE)
A
# Calcular el rango de la matriz usando la descomposición QR
rango = qr(A)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz A es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(A)
num_columnas = ncol(A)
# Resultados
if (rango == num_filas) {
cat("La matriz A es de rango pleno por filas.\n")
} else {
cat("La matriz A no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz A es de rango pleno por columnas.\n")
} else {
cat("La matriz A no es de rango pleno por columnas.\n")
}
# Comprobar si la matriz tiene inversa (solo es posible si es cuadrada)
# Si fuera cuadrada podríamos hacer lo siguiente:
# Intentar calcular la inversa usando la función solve(), que solo funciona para matrices cuadradas
tryCatch({
inv_A <- solve(A)  # Esto debería dar un error porque A no es cuadrada
}, error = function(e) {
message("Error: No se puede calcular la inversa porque la matriz no es cuadrada :(")
})
# *
# En el caso de que nos interesase, hay una opción de calcular una pseudoinvers de una matriz
# Cargar la librería MASS que tiene la función ginv para la pseudoinversa
install.packages("MASS")
library(MASS)
# Calcular la pseudoinversa de A
pseudo_inv_A = ginv(A)
pseudo_inv_A
rm(list = ls())
# Definir la matriz A
A = matrix(c(1, 2, 5, -1, 4, 0), nrow = 2, byrow = TRUE)
A
# Calcular el rango de la matriz usando la descomposición QR
rango = qr(A)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz A es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(A)
num_columnas = ncol(A)
# Resultados
if (rango == num_filas) {
cat("La matriz A es de rango pleno por filas.\n")
} else {
cat("La matriz A no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz A es de rango pleno por columnas.\n")
} else {
cat("La matriz A no es de rango pleno por columnas.\n")
}
# Comprobar si la matriz tiene inversa (solo es posible si es cuadrada)
# Si fuera cuadrada podríamos hacer lo siguiente:
# Intentar calcular la inversa usando la función solve(), que solo funciona para matrices cuadradas
tryCatch({
inv_A = solve(A)  # Esto debería dar un error porque A no es cuadrada
}, error = function(e) {
message("Error: No se puede calcular la inversa porque la matriz no es cuadrada :(")
})
A
A = matrix(c(0, 1, 2, 1, 1, 1), nrow = 3, byrow = TRUE)
B = matrix(c(0, 2, 5), nrow = 3, byrow = TRUE)
B
#2.paso: tipo de sistema (incompatible/compatible) con el Teorema de R-F
# Calcular el rango de la matriz usando la descomposición QR
rango = qr(A)$rank
# Mostrar el rango de la matriz
cat("El rango de la matriz A es:", rango, "\n")
# Verificar si es de rango pleno por filas o columnas
num_filas = nrow(A)
num_columnas = ncol(A)
# Resultados
if (rango == num_filas) {
cat("La matriz A es de rango pleno por filas.\n")
} else {
cat("La matriz A no es de rango pleno por filas.\n")
}
if (rango == num_columnas) {
cat("La matriz A es de rango pleno por columnas.\n")
} else {
cat("La matriz A no es de rango pleno por columnas.\n")
}
cat("Al ser matriz de rango plena por columnas significa que existe una invers lateral de A.")
# 3. Calcular la pseudo-inversa de A para resolver el sistema de mínimos cuadrados
# pseudo-inversa de A = (A' * A)^-1 * A'
A_inv_izquierda = solve(t(A) %*% A) %*% t(A)
# 4. Resolver el sistema utilizando la pseudo-inversa
X = A_inv_izquierda %*% B
cat("La solución es: a =", X[1], ", b =", X[2], "\n")
# 5. Graficar los puntos y la recta obtenida
# Instalamos y cargamos ggplot2 solo si aún no está instalado
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
# Crear un data frame para los puntos
datos = data.frame(x = c(0, 1, 2), y = c(0, 2, 5))
# Graficar los puntos y la recta de ajuste
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = X[1], intercept = X[2], color = "blue") +
labs(title = "Ajuste de mínimos cuadrados", x = "X", y = "Y") +
theme_minimal()
# Definir la matriz A
A <- matrix(c(1, 2, 5, -1, 4, 0), nrow = 2, byrow = TRUE)
A
# Verificar el rango de A para confirmar si es de rango completo por filas
rango <- qr(A)$rank
cat("El rango de la matriz A es:", rango, "\n")
# Número de filas y columnas
num_filas <- nrow(A)
num_columnas <- ncol(A)
# Comprobamos si la matriz es de rango completo por filas
if (rango == num_filas) {
cat("La matriz A es de rango pleno por filas, por lo que tiene inversa a la derecha.\n")
} else {
cat("La matriz A no es de rango pleno por filas, por lo que no tiene inversa a la derecha.\n")
}
# Calcular la pseudo-inversa derecha usando la fórmula: A_derecha_inv = t(A) %*% solve(A %*% t(A))
A_derecha_inv <- t(A) %*% solve(A %*% t(A))
cat("La inversa a la derecha de A es:\n")
print(A_derecha_inv)
# Definir los datos en un data frame
datos <- data.frame(x = c(0, 1, 2), y = c(0, 2, 5))
# Usar lm() para obtener la regresión lineal
modelo <- lm(y ~ x, data = datos)
# Mostrar los coeficientes
cat("Usando lm(): a =", coef(modelo)[2], ", b =", coef(modelo)[1], "\n")
# Graficar los puntos y la recta de ajuste
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = coef(modelo)[2], intercept = coef(modelo)[1], color = "blue") +
labs(title = "Ajuste de mínimos cuadrados usando lm()", x = "X", y = "Y") +
theme_minimal()
# Cargar la librería necesaria
library(Matrix)
# Datos del ejercicio
x = c(0, 1, 2)
y = c(0, 2, 5)
# Paso 1: Ajuste de los datos a la recta y = ax + b
# La forma de la ecuación en mínimos cuadrados es: A * X = b, donde X = [a, b]
# A = [x, 1] y b = y
A = cbind(x, 1)  # Matriz con las x y una columna de 1s
b = matrix(y, nrow = 3, byrow = TRUE)  # Vector columna con los valores de y
# Paso 2: Determinar el tipo de sistema (compatible o incompatible) mediante el Teorema de Rouché-Frobenius
rango_A = qr(A)$rank
rango_ampliada = qr(cbind(A, b))$rank
cat("Rango de A:", rango_A, "\n")
cat("Rango de la matriz ampliada:", rango_ampliada, "\n")
if (rango_A == rango_ampliada && rango_A == ncol(A)) {
cat("El sistema es compatible determinado.\n")
} else {
cat("El sistema es incompatible, buscamos la solución de mínimos cuadrados.\n")
}
# Paso 3 y 4: Verificar la existencia de la inversa lateral izquierda y calcularla
A_inv_izquierda = solve(t(A) %*% A) %*% t(A)
# Paso 5: Resolver el sistema utilizando la inversa lateral
solucion = A_inv_izquierda %*% b
cat("La solución es: a =", solucion[1], ", b =", solucion[2], "\n")
# Paso 6: Graficar los puntos y la recta de ajuste
# Instalar y cargar ggplot2 solo si aún no está instalado
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
# Crear un data frame para los puntos
datos = data.frame(x = x, y = y)
# Graficar los puntos y la recta de ajuste
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = solucion[1], intercept = solucion[2], color = "blue") +
labs(title = "Ajuste de mínimos cuadrados", x = "X", y = "Y") +
theme_minimal()
library(Matrix)
# Datos del ejercicio
x = c(0, 1, 2)
y = c(0, 2, 5)
# Paso 1: Ajuste de los datos a la recta y = ax + b
# La forma de la ecuación en mínimos cuadrados es: A * X = b, donde X = [a, b]
# A = [x, 1] y b = y
A = cbind(x, 1)  # Matriz con las x y una columna de 1s
b = matrix(y, nrow = 3, byrow = TRUE)  # Vector columna con los valores de y
# Paso 2: Determinar el tipo de sistema (compatible o incompatible) mediante el Teorema de Rouché-Frobenius
rango_A = qr(A)$rank
rango_ampliada = qr(cbind(A, b))$rank
cat("Rango de A:", rango_A, "\n")
cat("Rango de la matriz ampliada:", rango_ampliada, "\n")
if (rango_A == rango_ampliada && rango_A == ncol(A)) {
cat("El sistema es compatible determinado.\n")
} else {
cat("El sistema es incompatible, buscamos la solución de mínimos cuadrados.\n")
}
# Paso 3 y 4: Verificar la existencia de la inversa lateral izquierda y calcularla
A_inv_izquierda = solve(t(A) %*% A) %*% t(A)
# Paso 5: Resolver el sistema utilizando la inversa lateral
solucion = A_inv_izquierda %*% b
cat("La solución es: a =", solucion[1], ", b =", solucion[2], "\n")
# Paso 6: Graficar los puntos y la recta de ajuste
# Instalar y cargar ggplot2 solo si aún no está instalado
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
# Crear un data frame para los puntos
datos = data.frame(x = x, y = y)
# Graficar los puntos y la recta de ajuste
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "red", size = 3) +
geom_abline(slope = solucion[1], intercept = solucion[2], color = "blue") +
labs(title = "Ajuste de mínimos cuadrados", x = "X", y = "Y") +
theme_minimal()
# Cargar la librería necesaria
library(Matrix)
# Datos del ejercicio
x = c(0, 1, 2)
y = c(0, 2, 5)
# Paso 1: Ajuste de los datos a la recta y = ax + b
# La forma de la ecuación en mínimos cuadrados es: A * X = b, donde X = [a, b]
# A = [x, 1] y b = y
A = cbind(x, 1)  # Matriz con las x y una columna de 1s
View(A)
# Paso 1: Ajuste de los datos a la recta y = ax + b
# La forma de la ecuación en mínimos cuadrados es: A * X = b, donde X = [a, b]
# A = [x, 1] y b = y
A = cbind(x, 2)  # Matriz con las x y una columna de 1s
View(A)
# Paso 1: Ajuste de los datos a la recta y = ax + b
# La forma de la ecuación en mínimos cuadrados es: A * X = b, donde X = [a, b]
# A = [x, 1] y b = y
A = cbind(x, 1)  # Matriz con las x y una columna de 1s
b = matrix(y, nrow = 3, byrow = TRUE)  # Vector columna con los valores de y
View(b)
# Paso 2: Determinar el tipo de sistema (compatible o incompatible) mediante el Teorema de Rouché-Frobenius
rango_A = qr(A)$rank
rango_ampliada = qr(cbind(A, b))$rank
